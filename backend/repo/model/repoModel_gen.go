// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	repoFieldNames          = builder.RawFieldNames(&Repo{})
	repoRows                = strings.Join(repoFieldNames, ",")
	repoRowsExpectAutoSet   = strings.Join(stringx.Remove(repoFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	repoRowsWithPlaceHolder = strings.Join(stringx.Remove(repoFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRepoDataIdPrefix = "cache:repo:dataId:"
	cacheRepoIdPrefix     = "cache:repo:id:"
)

type (
	repoModel interface {
		Insert(ctx context.Context, data *Repo) (sql.Result, error)
		FindOne(ctx context.Context, dataId uint64) (*Repo, error)
		FindOneById(ctx context.Context, id uint64) (*Repo, error)
		Update(ctx context.Context, data *Repo) error
		Delete(ctx context.Context, dataId uint64) error
	}

	defaultRepoModel struct {
		sqlc.CachedConn
		table string
	}

	Repo struct {
		DataId       uint64    `db:"data_id"`
		DataCreateAt time.Time `db:"data_create_at"`
		DataUpdateAt time.Time `db:"data_update_at"`
		Id           uint64    `db:"id"`
		Name         string    `db:"name"`
		Gist         bool      `db:"gist"`
		StarCount    int64     `db:"star_count"`
		ForkCount    int64     `db:"fork_count"`
		IssueCount   int64     `db:"issue_count"`
		CommitCount  int64     `db:"commit_count"`
		PrCount      int64     `db:"pr_count"`
		Language     string    `db:"language"`
		Description  string    `db:"description"`
		Readme       string    `db:"readme"`
	}
)

func newRepoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRepoModel {
	return &defaultRepoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`repo`",
	}
}

func (m *defaultRepoModel) Delete(ctx context.Context, dataId uint64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	repoDataIdKey := fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, dataId)
	repoIdKey := fmt.Sprintf("%s%v", cacheRepoIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `data_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, repoDataIdKey, repoIdKey)
	return err
}

func (m *defaultRepoModel) FindOne(ctx context.Context, dataId uint64) (*Repo, error) {
	repoDataIdKey := fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, dataId)
	var resp Repo
	err := m.QueryRowCtx(ctx, &resp, repoDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", repoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRepoModel) FindOneById(ctx context.Context, id uint64) (*Repo, error) {
	repoIdKey := fmt.Sprintf("%s%v", cacheRepoIdPrefix, id)
	var resp Repo
	err := m.QueryRowIndexCtx(ctx, &resp, repoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", repoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, id); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRepoModel) Insert(ctx context.Context, data *Repo) (sql.Result, error) {
	repoDataIdKey := fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, data.DataId)
	repoIdKey := fmt.Sprintf("%s%v", cacheRepoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, repoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataCreateAt, data.DataUpdateAt, data.Id, data.Name, data.Gist, data.StarCount, data.ForkCount, data.IssueCount, data.CommitCount, data.PrCount, data.Language, data.Description, data.Readme)
	}, repoDataIdKey, repoIdKey)
	return ret, err
}

func (m *defaultRepoModel) Update(ctx context.Context, newData *Repo) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	repoDataIdKey := fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, data.DataId)
	repoIdKey := fmt.Sprintf("%s%v", cacheRepoIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `data_id` = ?", m.table, repoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataCreateAt, newData.DataUpdateAt, newData.Id, newData.Name, newData.Gist, newData.StarCount, newData.ForkCount, newData.IssueCount, newData.CommitCount, newData.PrCount, newData.Language, newData.Description, newData.Readme, newData.DataId)
	}, repoDataIdKey, repoIdKey)
	return err
}

func (m *defaultRepoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRepoDataIdPrefix, primary)
}

func (m *defaultRepoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", repoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRepoModel) tableName() string {
	return m.table
}
