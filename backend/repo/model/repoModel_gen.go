// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	repoFieldNames          = builder.RawFieldNames(&Repo{}, true)
	repoRows                = strings.Join(repoFieldNames, ",")
	repoRowsExpectAutoSet   = strings.Join(stringx.Remove(repoFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	repoRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(repoFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheRepoRepoDataIdPrefix = "cache:repo:repo:dataId:"
	cacheRepoRepoIdPrefix     = "cache:repo:repo:id:"
)

type (
	repoModel interface {
		Insert(ctx context.Context, data *Repo) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Repo, error)
		FindOneById(ctx context.Context, id int64) (*Repo, error)
		Update(ctx context.Context, data *Repo) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultRepoModel struct {
		sqlc.CachedConn
		table string
	}

	Repo struct {
		DataId                  int64     `db:"data_id"`
		DataCreateAt            time.Time `db:"data_create_at"`
		DataUpdateAt            time.Time `db:"data_update_at"`
		Id                      int64     `db:"id"`
		Name                    string    `db:"name"`
		StarCount               int64     `db:"star_count"`
		ForkCount               int64     `db:"fork_count"`
		IssueCount              int64     `db:"issue_count"`
		CommitCount             int64     `db:"commit_count"`
		PrCount                 int64     `db:"pr_count"`
		Language                string    `db:"language"`
		Description             string    `db:"description"`
		LastFetchForkAt         time.Time `db:"last_fetch_fork_at"`
		LastFetchContributionAt time.Time `db:"last_fetch_contribution_at"`
	}
)

func newRepoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRepoModel {
	return &defaultRepoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"repo"."repo"`,
	}
}

func (m *defaultRepoModel) Delete(ctx context.Context, dataId int64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	repoRepoDataIdKey := fmt.Sprintf("%s%v", cacheRepoRepoDataIdPrefix, dataId)
	repoRepoIdKey := fmt.Sprintf("%s%v", cacheRepoRepoIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where data_id = $1", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, repoRepoDataIdKey, repoRepoIdKey)
	return err
}

func (m *defaultRepoModel) FindOne(ctx context.Context, dataId int64) (*Repo, error) {
	repoRepoDataIdKey := fmt.Sprintf("%s%v", cacheRepoRepoDataIdPrefix, dataId)
	var resp Repo
	err := m.QueryRowCtx(ctx, &resp, repoRepoDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", repoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRepoModel) FindOneById(ctx context.Context, id int64) (*Repo, error) {
	repoRepoIdKey := fmt.Sprintf("%s%v", cacheRepoRepoIdPrefix, id)
	var resp Repo
	err := m.QueryRowIndexCtx(ctx, &resp, repoRepoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", repoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, id); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRepoModel) Insert(ctx context.Context, data *Repo) (sql.Result, error) {
	repoRepoDataIdKey := fmt.Sprintf("%s%v", cacheRepoRepoDataIdPrefix, data.DataId)
	repoRepoIdKey := fmt.Sprintf("%s%v", cacheRepoRepoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)", m.table, repoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataCreateAt, data.DataUpdateAt, data.Id, data.Name, data.StarCount, data.ForkCount, data.IssueCount, data.CommitCount, data.PrCount, data.Language, data.Description, data.LastFetchForkAt, data.LastFetchContributionAt)
	}, repoRepoDataIdKey, repoRepoIdKey)
	return ret, err
}

func (m *defaultRepoModel) Update(ctx context.Context, newData *Repo) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	repoRepoDataIdKey := fmt.Sprintf("%s%v", cacheRepoRepoDataIdPrefix, data.DataId)
	repoRepoIdKey := fmt.Sprintf("%s%v", cacheRepoRepoIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where data_id = $1", m.table, repoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataId, newData.DataCreateAt, newData.DataUpdateAt, newData.Id, newData.Name, newData.StarCount, newData.ForkCount, newData.IssueCount, newData.CommitCount, newData.PrCount, newData.Language, newData.Description, newData.LastFetchForkAt, newData.LastFetchContributionAt)
	}, repoRepoDataIdKey, repoRepoIdKey)
	return err
}

func (m *defaultRepoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRepoRepoDataIdPrefix, primary)
}

func (m *defaultRepoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", repoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRepoModel) tableName() string {
	return m.table
}
