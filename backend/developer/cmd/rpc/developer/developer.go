// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: developer.proto

package developer

import (
	"context"

	"github.com/ShellWen/GitPulse/developer/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddDeveloperReq                = pb.AddDeveloperReq
	AddDeveloperResp               = pb.AddDeveloperResp
	BlockUntilDeveloperUpdatedReq  = pb.BlockUntilDeveloperUpdatedReq
	BlockUntilDeveloperUpdatedResp = pb.BlockUntilDeveloperUpdatedResp
	DelDeveloperByIdReq            = pb.DelDeveloperByIdReq
	DelDeveloperByIdResp           = pb.DelDeveloperByIdResp
	DelDeveloperByLoginReq         = pb.DelDeveloperByLoginReq
	DelDeveloperByLoginResp        = pb.DelDeveloperByLoginResp
	Developer                      = pb.Developer
	GetDeveloperByIdReq            = pb.GetDeveloperByIdReq
	GetDeveloperByIdResp           = pb.GetDeveloperByIdResp
	GetDeveloperByLoginReq         = pb.GetDeveloperByLoginReq
	GetDeveloperByLoginResp        = pb.GetDeveloperByLoginResp
	UnblockDeveloperReq            = pb.UnblockDeveloperReq
	UnblockDeveloperResp           = pb.UnblockDeveloperResp
	UpdateDeveloperReq             = pb.UpdateDeveloperReq
	UpdateDeveloperResp            = pb.UpdateDeveloperResp

	DeveloperZrpcClient interface {
		// -----------------------developer-----------------------
		AddDeveloper(ctx context.Context, in *AddDeveloperReq, opts ...grpc.CallOption) (*AddDeveloperResp, error)
		UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...grpc.CallOption) (*UpdateDeveloperResp, error)
		DelDeveloperById(ctx context.Context, in *DelDeveloperByIdReq, opts ...grpc.CallOption) (*DelDeveloperByIdResp, error)
		DelDeveloperByLogin(ctx context.Context, in *DelDeveloperByLoginReq, opts ...grpc.CallOption) (*DelDeveloperByLoginResp, error)
		GetDeveloperById(ctx context.Context, in *GetDeveloperByIdReq, opts ...grpc.CallOption) (*GetDeveloperByIdResp, error)
		GetDeveloperByLogin(ctx context.Context, in *GetDeveloperByLoginReq, opts ...grpc.CallOption) (*GetDeveloperByLoginResp, error)
		BlockUntilDeveloperUpdated(ctx context.Context, in *BlockUntilDeveloperUpdatedReq, opts ...grpc.CallOption) (*BlockUntilDeveloperUpdatedResp, error)
		UnblockDeveloper(ctx context.Context, in *UnblockDeveloperReq, opts ...grpc.CallOption) (*UnblockDeveloperResp, error)
	}

	defaultDeveloperZrpcClient struct {
		cli zrpc.Client
	}
)

func NewDeveloperZrpcClient(cli zrpc.Client) DeveloperZrpcClient {
	return &defaultDeveloperZrpcClient{
		cli: cli,
	}
}

// -----------------------developer-----------------------
func (m *defaultDeveloperZrpcClient) AddDeveloper(ctx context.Context, in *AddDeveloperReq, opts ...grpc.CallOption) (*AddDeveloperResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.AddDeveloper(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...grpc.CallOption) (*UpdateDeveloperResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.UpdateDeveloper(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) DelDeveloperById(ctx context.Context, in *DelDeveloperByIdReq, opts ...grpc.CallOption) (*DelDeveloperByIdResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.DelDeveloperById(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) DelDeveloperByLogin(ctx context.Context, in *DelDeveloperByLoginReq, opts ...grpc.CallOption) (*DelDeveloperByLoginResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.DelDeveloperByLogin(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) GetDeveloperById(ctx context.Context, in *GetDeveloperByIdReq, opts ...grpc.CallOption) (*GetDeveloperByIdResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.GetDeveloperById(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) GetDeveloperByLogin(ctx context.Context, in *GetDeveloperByLoginReq, opts ...grpc.CallOption) (*GetDeveloperByLoginResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.GetDeveloperByLogin(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) BlockUntilDeveloperUpdated(ctx context.Context, in *BlockUntilDeveloperUpdatedReq, opts ...grpc.CallOption) (*BlockUntilDeveloperUpdatedResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.BlockUntilDeveloperUpdated(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) UnblockDeveloper(ctx context.Context, in *UnblockDeveloperReq, opts ...grpc.CallOption) (*UnblockDeveloperResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.UnblockDeveloper(ctx, in, opts...)
}
