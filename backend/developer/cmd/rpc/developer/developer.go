// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: developer.proto

package developer

import (
	"context"

	"github.com/ShellWen/GitPulse/developer/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddDeveloperReq            = pb.AddDeveloperReq
	AddDeveloperResp           = pb.AddDeveloperResp
	DelDeveloperByIdReq        = pb.DelDeveloperByIdReq
	DelDeveloperByIdResp       = pb.DelDeveloperByIdResp
	DelDeveloperByUsernameReq  = pb.DelDeveloperByUsernameReq
	DelDeveloperByUsernameResp = pb.DelDeveloperByUsernameResp
	Developer                  = pb.Developer
	GetDeveloperByIdReq        = pb.GetDeveloperByIdReq
	GetDeveloperByIdResp       = pb.GetDeveloperByIdResp
	GetDeveloperByUsernameReq  = pb.GetDeveloperByUsernameReq
	GetDeveloperByUsernameResp = pb.GetDeveloperByUsernameResp
	SearchDeveloperReq         = pb.SearchDeveloperReq
	SearchDeveloperResp        = pb.SearchDeveloperResp
	UpdateDeveloperReq         = pb.UpdateDeveloperReq
	UpdateDeveloperResp        = pb.UpdateDeveloperResp

	DeveloperZrpcClient interface {
		// -----------------------developer-----------------------
		AddDeveloper(ctx context.Context, in *AddDeveloperReq, opts ...grpc.CallOption) (*AddDeveloperResp, error)
		UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...grpc.CallOption) (*UpdateDeveloperResp, error)
		DelDeveloperById(ctx context.Context, in *DelDeveloperByIdReq, opts ...grpc.CallOption) (*DelDeveloperByIdResp, error)
		DelDeveloperByUsername(ctx context.Context, in *DelDeveloperByUsernameReq, opts ...grpc.CallOption) (*DelDeveloperByUsernameResp, error)
		GetDeveloperById(ctx context.Context, in *GetDeveloperByIdReq, opts ...grpc.CallOption) (*GetDeveloperByIdResp, error)
		GetDeveloperByUsername(ctx context.Context, in *GetDeveloperByUsernameReq, opts ...grpc.CallOption) (*GetDeveloperByUsernameResp, error)
		SearchDeveloper(ctx context.Context, in *SearchDeveloperReq, opts ...grpc.CallOption) (*SearchDeveloperResp, error)
	}

	defaultDeveloperZrpcClient struct {
		cli zrpc.Client
	}
)

func NewDeveloperZrpcClient(cli zrpc.Client) DeveloperZrpcClient {
	return &defaultDeveloperZrpcClient{
		cli: cli,
	}
}

// -----------------------developer-----------------------
func (m *defaultDeveloperZrpcClient) AddDeveloper(ctx context.Context, in *AddDeveloperReq, opts ...grpc.CallOption) (*AddDeveloperResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.AddDeveloper(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...grpc.CallOption) (*UpdateDeveloperResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.UpdateDeveloper(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) DelDeveloperById(ctx context.Context, in *DelDeveloperByIdReq, opts ...grpc.CallOption) (*DelDeveloperByIdResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.DelDeveloperById(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) DelDeveloperByUsername(ctx context.Context, in *DelDeveloperByUsernameReq, opts ...grpc.CallOption) (*DelDeveloperByUsernameResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.DelDeveloperByUsername(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) GetDeveloperById(ctx context.Context, in *GetDeveloperByIdReq, opts ...grpc.CallOption) (*GetDeveloperByIdResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.GetDeveloperById(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) GetDeveloperByUsername(ctx context.Context, in *GetDeveloperByUsernameReq, opts ...grpc.CallOption) (*GetDeveloperByUsernameResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.GetDeveloperByUsername(ctx, in, opts...)
}

func (m *defaultDeveloperZrpcClient) SearchDeveloper(ctx context.Context, in *SearchDeveloperReq, opts ...grpc.CallOption) (*SearchDeveloperResp, error) {
	client := pb.NewDeveloperClient(m.cli.Conn())
	return client.SearchDeveloper(ctx, in, opts...)
}
