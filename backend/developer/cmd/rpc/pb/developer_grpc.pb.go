// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: developer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Developer_AddDeveloper_FullMethodName           = "/pb.developer/AddDeveloper"
	Developer_UpdateDeveloper_FullMethodName        = "/pb.developer/UpdateDeveloper"
	Developer_DelDeveloperById_FullMethodName       = "/pb.developer/DelDeveloperById"
	Developer_DelDeveloperByUsername_FullMethodName = "/pb.developer/DelDeveloperByUsername"
	Developer_GetDeveloperById_FullMethodName       = "/pb.developer/GetDeveloperById"
	Developer_GetDeveloperByUsername_FullMethodName = "/pb.developer/GetDeveloperByUsername"
	Developer_SearchDeveloper_FullMethodName        = "/pb.developer/SearchDeveloper"
)

// DeveloperClient is the client API for Developer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeveloperClient interface {
	// -----------------------developer-----------------------
	AddDeveloper(ctx context.Context, in *AddDeveloperReq, opts ...grpc.CallOption) (*AddDeveloperResp, error)
	UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...grpc.CallOption) (*UpdateDeveloperResp, error)
	DelDeveloperById(ctx context.Context, in *DelDeveloperByIdReq, opts ...grpc.CallOption) (*DelDeveloperByIdResp, error)
	DelDeveloperByUsername(ctx context.Context, in *DelDeveloperByUsernameReq, opts ...grpc.CallOption) (*DelDeveloperByUsernameResp, error)
	GetDeveloperById(ctx context.Context, in *GetDeveloperByIdReq, opts ...grpc.CallOption) (*GetDeveloperByIdResp, error)
	GetDeveloperByUsername(ctx context.Context, in *GetDeveloperByUsernameReq, opts ...grpc.CallOption) (*GetDeveloperByUsernameResp, error)
	SearchDeveloper(ctx context.Context, in *SearchDeveloperReq, opts ...grpc.CallOption) (*SearchDeveloperResp, error)
}

type developerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperClient(cc grpc.ClientConnInterface) DeveloperClient {
	return &developerClient{cc}
}

func (c *developerClient) AddDeveloper(ctx context.Context, in *AddDeveloperReq, opts ...grpc.CallOption) (*AddDeveloperResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDeveloperResp)
	err := c.cc.Invoke(ctx, Developer_AddDeveloper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...grpc.CallOption) (*UpdateDeveloperResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeveloperResp)
	err := c.cc.Invoke(ctx, Developer_UpdateDeveloper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) DelDeveloperById(ctx context.Context, in *DelDeveloperByIdReq, opts ...grpc.CallOption) (*DelDeveloperByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelDeveloperByIdResp)
	err := c.cc.Invoke(ctx, Developer_DelDeveloperById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) DelDeveloperByUsername(ctx context.Context, in *DelDeveloperByUsernameReq, opts ...grpc.CallOption) (*DelDeveloperByUsernameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelDeveloperByUsernameResp)
	err := c.cc.Invoke(ctx, Developer_DelDeveloperByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) GetDeveloperById(ctx context.Context, in *GetDeveloperByIdReq, opts ...grpc.CallOption) (*GetDeveloperByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeveloperByIdResp)
	err := c.cc.Invoke(ctx, Developer_GetDeveloperById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) GetDeveloperByUsername(ctx context.Context, in *GetDeveloperByUsernameReq, opts ...grpc.CallOption) (*GetDeveloperByUsernameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeveloperByUsernameResp)
	err := c.cc.Invoke(ctx, Developer_GetDeveloperByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) SearchDeveloper(ctx context.Context, in *SearchDeveloperReq, opts ...grpc.CallOption) (*SearchDeveloperResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDeveloperResp)
	err := c.cc.Invoke(ctx, Developer_SearchDeveloper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperServer is the server API for Developer service.
// All implementations must embed UnimplementedDeveloperServer
// for forward compatibility.
type DeveloperServer interface {
	// -----------------------developer-----------------------
	AddDeveloper(context.Context, *AddDeveloperReq) (*AddDeveloperResp, error)
	UpdateDeveloper(context.Context, *UpdateDeveloperReq) (*UpdateDeveloperResp, error)
	DelDeveloperById(context.Context, *DelDeveloperByIdReq) (*DelDeveloperByIdResp, error)
	DelDeveloperByUsername(context.Context, *DelDeveloperByUsernameReq) (*DelDeveloperByUsernameResp, error)
	GetDeveloperById(context.Context, *GetDeveloperByIdReq) (*GetDeveloperByIdResp, error)
	GetDeveloperByUsername(context.Context, *GetDeveloperByUsernameReq) (*GetDeveloperByUsernameResp, error)
	SearchDeveloper(context.Context, *SearchDeveloperReq) (*SearchDeveloperResp, error)
	mustEmbedUnimplementedDeveloperServer()
}

// UnimplementedDeveloperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeveloperServer struct{}

func (UnimplementedDeveloperServer) AddDeveloper(context.Context, *AddDeveloperReq) (*AddDeveloperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeveloper not implemented")
}
func (UnimplementedDeveloperServer) UpdateDeveloper(context.Context, *UpdateDeveloperReq) (*UpdateDeveloperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeveloper not implemented")
}
func (UnimplementedDeveloperServer) DelDeveloperById(context.Context, *DelDeveloperByIdReq) (*DelDeveloperByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDeveloperById not implemented")
}
func (UnimplementedDeveloperServer) DelDeveloperByUsername(context.Context, *DelDeveloperByUsernameReq) (*DelDeveloperByUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDeveloperByUsername not implemented")
}
func (UnimplementedDeveloperServer) GetDeveloperById(context.Context, *GetDeveloperByIdReq) (*GetDeveloperByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloperById not implemented")
}
func (UnimplementedDeveloperServer) GetDeveloperByUsername(context.Context, *GetDeveloperByUsernameReq) (*GetDeveloperByUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloperByUsername not implemented")
}
func (UnimplementedDeveloperServer) SearchDeveloper(context.Context, *SearchDeveloperReq) (*SearchDeveloperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDeveloper not implemented")
}
func (UnimplementedDeveloperServer) mustEmbedUnimplementedDeveloperServer() {}
func (UnimplementedDeveloperServer) testEmbeddedByValue()                   {}

// UnsafeDeveloperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeveloperServer will
// result in compilation errors.
type UnsafeDeveloperServer interface {
	mustEmbedUnimplementedDeveloperServer()
}

func RegisterDeveloperServer(s grpc.ServiceRegistrar, srv DeveloperServer) {
	// If the following call pancis, it indicates UnimplementedDeveloperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Developer_ServiceDesc, srv)
}

func _Developer_AddDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeveloperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).AddDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_AddDeveloper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).AddDeveloper(ctx, req.(*AddDeveloperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_UpdateDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeveloperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).UpdateDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_UpdateDeveloper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).UpdateDeveloper(ctx, req.(*UpdateDeveloperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_DelDeveloperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDeveloperByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).DelDeveloperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_DelDeveloperById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).DelDeveloperById(ctx, req.(*DelDeveloperByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_DelDeveloperByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDeveloperByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).DelDeveloperByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_DelDeveloperByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).DelDeveloperByUsername(ctx, req.(*DelDeveloperByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_GetDeveloperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).GetDeveloperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_GetDeveloperById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).GetDeveloperById(ctx, req.(*GetDeveloperByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_GetDeveloperByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).GetDeveloperByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_GetDeveloperByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).GetDeveloperByUsername(ctx, req.(*GetDeveloperByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_SearchDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDeveloperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).SearchDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_SearchDeveloper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).SearchDeveloper(ctx, req.(*SearchDeveloperReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Developer_ServiceDesc is the grpc.ServiceDesc for Developer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Developer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.developer",
	HandlerType: (*DeveloperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDeveloper",
			Handler:    _Developer_AddDeveloper_Handler,
		},
		{
			MethodName: "UpdateDeveloper",
			Handler:    _Developer_UpdateDeveloper_Handler,
		},
		{
			MethodName: "DelDeveloperById",
			Handler:    _Developer_DelDeveloperById_Handler,
		},
		{
			MethodName: "DelDeveloperByUsername",
			Handler:    _Developer_DelDeveloperByUsername_Handler,
		},
		{
			MethodName: "GetDeveloperById",
			Handler:    _Developer_GetDeveloperById_Handler,
		},
		{
			MethodName: "GetDeveloperByUsername",
			Handler:    _Developer_GetDeveloperByUsername_Handler,
		},
		{
			MethodName: "SearchDeveloper",
			Handler:    _Developer_SearchDeveloper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "developer.proto",
}
