// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	developerFieldNames          = builder.RawFieldNames(&Developer{})
	developerRows                = strings.Join(developerFieldNames, ",")
	developerRowsExpectAutoSet   = strings.Join(stringx.Remove(developerFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	developerRowsWithPlaceHolder = strings.Join(stringx.Remove(developerFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDeveloperDataIdPrefix   = "cache:developer:dataId:"
	cacheDeveloperIdPrefix       = "cache:developer:id:"
	cacheDeveloperUsernamePrefix = "cache:developer:username:"
)

type (
	developerModel interface {
		Insert(ctx context.Context, data *Developer) (sql.Result, error)
		FindOne(ctx context.Context, dataId uint64) (*Developer, error)
		FindOneById(ctx context.Context, id uint64) (*Developer, error)
		FindOneByUsername(ctx context.Context, username string) (*Developer, error)
		Update(ctx context.Context, data *Developer) error
		Delete(ctx context.Context, dataId uint64) error
	}

	defaultDeveloperModel struct {
		sqlc.CachedConn
		table string
	}

	Developer struct {
		DataId       uint64    `db:"data_id"` // Generated primary key, MUST NOT be changed.
		DataCreateAt time.Time `db:"data_create_at"`
		DataUpdateAt time.Time `db:"data_update_at"`
		Id           uint64    `db:"id"` // Unique id of GitHub user.
		Name         string    `db:"name"`
		Username     string    `db:"username"`
		AvatarUrl    string    `db:"avatar_url"`
		Company      string    `db:"company"`
		Location     string    `db:"location"`
		Bio          string    `db:"bio"`
		Blog         string    `db:"blog"`
		Email        string    `db:"email"`
		CreateAt     time.Time `db:"create_at"`
		UpdateAt     time.Time `db:"update_at"`
	}
)

func newDeveloperModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDeveloperModel {
	return &defaultDeveloperModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`developer`",
	}
}

func (m *defaultDeveloperModel) Delete(ctx context.Context, dataId uint64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	developerDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, dataId)
	developerIdKey := fmt.Sprintf("%s%v", cacheDeveloperIdPrefix, data.Id)
	developerUsernameKey := fmt.Sprintf("%s%v", cacheDeveloperUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `data_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, developerDataIdKey, developerIdKey, developerUsernameKey)
	return err
}

func (m *defaultDeveloperModel) FindOne(ctx context.Context, dataId uint64) (*Developer, error) {
	developerDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, dataId)
	var resp Developer
	err := m.QueryRowCtx(ctx, &resp, developerDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", developerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeveloperModel) FindOneById(ctx context.Context, id uint64) (*Developer, error) {
	developerIdKey := fmt.Sprintf("%s%v", cacheDeveloperIdPrefix, id)
	var resp Developer
	err := m.QueryRowIndexCtx(ctx, &resp, developerIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", developerRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, id); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeveloperModel) FindOneByUsername(ctx context.Context, username string) (*Developer, error) {
	developerUsernameKey := fmt.Sprintf("%s%v", cacheDeveloperUsernamePrefix, username)
	var resp Developer
	err := m.QueryRowIndexCtx(ctx, &resp, developerUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", developerRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeveloperModel) Insert(ctx context.Context, data *Developer) (sql.Result, error) {
	developerDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, data.DataId)
	developerIdKey := fmt.Sprintf("%s%v", cacheDeveloperIdPrefix, data.Id)
	developerUsernameKey := fmt.Sprintf("%s%v", cacheDeveloperUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, developerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataCreateAt, data.DataUpdateAt, data.Id, data.Name, data.Username, data.AvatarUrl, data.Company, data.Location, data.Bio, data.Blog, data.Email)
	}, developerDataIdKey, developerIdKey, developerUsernameKey)
	return ret, err
}

func (m *defaultDeveloperModel) Update(ctx context.Context, newData *Developer) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	developerDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, data.DataId)
	developerIdKey := fmt.Sprintf("%s%v", cacheDeveloperIdPrefix, data.Id)
	developerUsernameKey := fmt.Sprintf("%s%v", cacheDeveloperUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `data_id` = ?", m.table, developerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataCreateAt, newData.DataUpdateAt, newData.Id, newData.Name, newData.Username, newData.AvatarUrl, newData.Company, newData.Location, newData.Bio, newData.Blog, newData.Email, newData.DataId)
	}, developerDataIdKey, developerIdKey, developerUsernameKey)
	return err
}

func (m *defaultDeveloperModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDeveloperDataIdPrefix, primary)
}

func (m *defaultDeveloperModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", developerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDeveloperModel) tableName() string {
	return m.table
}
