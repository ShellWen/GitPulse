// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	developerFieldNames          = builder.RawFieldNames(&Developer{}, true)
	developerRows                = strings.Join(developerFieldNames, ",")
	developerRowsExpectAutoSet   = strings.Join(stringx.Remove(developerFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	developerRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(developerFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheDeveloperDeveloperDataIdPrefix = "cache:developer:developer:dataId:"
	cacheDeveloperDeveloperIdPrefix     = "cache:developer:developer:id:"
	cacheDeveloperDeveloperLoginPrefix  = "cache:developer:developer:login:"
)

type (
	developerModel interface {
		Insert(ctx context.Context, data *Developer) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Developer, error)
		FindOneById(ctx context.Context, id int64) (*Developer, error)
		FindOneByLogin(ctx context.Context, login string) (*Developer, error)
		Update(ctx context.Context, data *Developer) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultDeveloperModel struct {
		sqlc.CachedConn
		table string
	}

	Developer struct {
		DataId          int64     `db:"data_id"`
		DataCreatedAt   time.Time `db:"data_created_at"`
		DataUpdatedAt   time.Time `db:"data_updated_at"`
		Id              int64     `db:"id"`
		Name            string    `db:"name"`
		Login           string    `db:"login"`
		AvatarUrl       string    `db:"avatar_url"`
		Company         string    `db:"company"`
		Location        string    `db:"location"`
		Bio             string    `db:"bio"`
		Blog            string    `db:"blog"`
		Email           string    `db:"email"`
		CreatedAt       time.Time `db:"created_at"`
		UpdatedAt       time.Time `db:"updated_at"`
		TwitterUsername string    `db:"twitter_username"`
		Repos           int64     `db:"repos"`
		Following       int64     `db:"following"`
		Followers       int64     `db:"followers"`
		Gists           int64     `db:"gists"`
		Stars           int64     `db:"stars"`
	}
)

func newDeveloperModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDeveloperModel {
	return &defaultDeveloperModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"developer"."developer"`,
	}
}

func (m *defaultDeveloperModel) Delete(ctx context.Context, dataId int64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	developerDeveloperDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperDataIdPrefix, dataId)
	developerDeveloperIdKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperIdPrefix, data.Id)
	developerDeveloperLoginKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperLoginPrefix, data.Login)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where data_id = $1", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, developerDeveloperDataIdKey, developerDeveloperIdKey, developerDeveloperLoginKey)
	return err
}

func (m *defaultDeveloperModel) FindOne(ctx context.Context, dataId int64) (*Developer, error) {
	developerDeveloperDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperDataIdPrefix, dataId)
	var resp Developer
	err := m.QueryRowCtx(ctx, &resp, developerDeveloperDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", developerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeveloperModel) FindOneById(ctx context.Context, id int64) (*Developer, error) {
	developerDeveloperIdKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperIdPrefix, id)
	var resp Developer
	err := m.QueryRowIndexCtx(ctx, &resp, developerDeveloperIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", developerRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, id); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeveloperModel) FindOneByLogin(ctx context.Context, login string) (*Developer, error) {
	developerDeveloperLoginKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperLoginPrefix, login)
	var resp Developer
	err := m.QueryRowIndexCtx(ctx, &resp, developerDeveloperLoginKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where login = $1 limit 1", developerRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, login); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeveloperModel) Insert(ctx context.Context, data *Developer) (sql.Result, error) {
	developerDeveloperDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperDataIdPrefix, data.DataId)
	developerDeveloperIdKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperIdPrefix, data.Id)
	developerDeveloperLoginKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperLoginPrefix, data.Login)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)", m.table, developerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataCreatedAt, data.DataUpdatedAt, data.Id, data.Name, data.Login, data.AvatarUrl, data.Company, data.Location, data.Bio, data.Blog, data.Email, data.TwitterUsername, data.Repos, data.Following, data.Followers, data.Gists, data.Stars)
	}, developerDeveloperDataIdKey, developerDeveloperIdKey, developerDeveloperLoginKey)
	return ret, err
}

func (m *defaultDeveloperModel) Update(ctx context.Context, newData *Developer) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	developerDeveloperDataIdKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperDataIdPrefix, data.DataId)
	developerDeveloperIdKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperIdPrefix, data.Id)
	developerDeveloperLoginKey := fmt.Sprintf("%s%v", cacheDeveloperDeveloperLoginPrefix, data.Login)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where data_id = $1", m.table, developerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataId, newData.DataCreatedAt, newData.DataUpdatedAt, newData.Id, newData.Name, newData.Login, newData.AvatarUrl, newData.Company, newData.Location, newData.Bio, newData.Blog, newData.Email, newData.TwitterUsername, newData.Repos, newData.Following, newData.Followers, newData.Gists, newData.Stars)
	}, developerDeveloperDataIdKey, developerDeveloperIdKey, developerDeveloperLoginKey)
	return err
}

func (m *defaultDeveloperModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDeveloperDeveloperDataIdPrefix, primary)
}

func (m *defaultDeveloperModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", developerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDeveloperModel) tableName() string {
	return m.table
}
