// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	followFieldNames          = builder.RawFieldNames(&Follow{}, true)
	followRows                = strings.Join(followFieldNames, ",")
	followRowsExpectAutoSet   = strings.Join(stringx.Remove(followFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	followRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(followFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheRelationFollowDataIdPrefix                = "cache:relation:follow:dataId:"
	cacheRelationFollowFollowingIdFollowedIdPrefix = "cache:relation:follow:followingId:followedId:"
)

type (
	followModel interface {
		Insert(ctx context.Context, data *Follow) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Follow, error)
		FindOneByFollowingIdFollowedId(ctx context.Context, followingId int64, followedId int64) (*Follow, error)
		Update(ctx context.Context, data *Follow) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultFollowModel struct {
		sqlc.CachedConn
		table string
	}

	Follow struct {
		DataId      int64 `db:"data_id"`
		FollowingId int64 `db:"following_id"`
		FollowedId  int64 `db:"followed_id"`
	}
)

func newFollowModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFollowModel {
	return &defaultFollowModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"relation"."follow"`,
	}
}

func (m *defaultFollowModel) Delete(ctx context.Context, dataId int64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	relationFollowDataIdKey := fmt.Sprintf("%s%v", cacheRelationFollowDataIdPrefix, dataId)
	relationFollowFollowingIdFollowedIdKey := fmt.Sprintf("%s%v:%v", cacheRelationFollowFollowingIdFollowedIdPrefix, data.FollowingId, data.FollowedId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where data_id = $1", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, relationFollowDataIdKey, relationFollowFollowingIdFollowedIdKey)
	return err
}

func (m *defaultFollowModel) FindOne(ctx context.Context, dataId int64) (*Follow, error) {
	relationFollowDataIdKey := fmt.Sprintf("%s%v", cacheRelationFollowDataIdPrefix, dataId)
	var resp Follow
	err := m.QueryRowCtx(ctx, &resp, relationFollowDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", followRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowModel) FindOneByFollowingIdFollowedId(ctx context.Context, followingId int64, followedId int64) (*Follow, error) {
	relationFollowFollowingIdFollowedIdKey := fmt.Sprintf("%s%v:%v", cacheRelationFollowFollowingIdFollowedIdPrefix, followingId, followedId)
	var resp Follow
	err := m.QueryRowIndexCtx(ctx, &resp, relationFollowFollowingIdFollowedIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where following_id = $1 and followed_id = $2 limit 1", followRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, followingId, followedId); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowModel) Insert(ctx context.Context, data *Follow) (sql.Result, error) {
	relationFollowDataIdKey := fmt.Sprintf("%s%v", cacheRelationFollowDataIdPrefix, data.DataId)
	relationFollowFollowingIdFollowedIdKey := fmt.Sprintf("%s%v:%v", cacheRelationFollowFollowingIdFollowedIdPrefix, data.FollowingId, data.FollowedId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, followRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FollowingId, data.FollowedId)
	}, relationFollowDataIdKey, relationFollowFollowingIdFollowedIdKey)
	return ret, err
}

func (m *defaultFollowModel) Update(ctx context.Context, newData *Follow) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	relationFollowDataIdKey := fmt.Sprintf("%s%v", cacheRelationFollowDataIdPrefix, data.DataId)
	relationFollowFollowingIdFollowedIdKey := fmt.Sprintf("%s%v:%v", cacheRelationFollowFollowingIdFollowedIdPrefix, data.FollowingId, data.FollowedId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where data_id = $1", m.table, followRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataId, newData.FollowingId, newData.FollowedId)
	}, relationFollowDataIdKey, relationFollowFollowingIdFollowedIdKey)
	return err
}

func (m *defaultFollowModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRelationFollowDataIdPrefix, primary)
}

func (m *defaultFollowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", followRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFollowModel) tableName() string {
	return m.table
}
