// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	forkFieldNames          = builder.RawFieldNames(&Fork{})
	forkRows                = strings.Join(forkFieldNames, ",")
	forkRowsExpectAutoSet   = strings.Join(stringx.Remove(forkFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	forkRowsWithPlaceHolder = strings.Join(stringx.Remove(forkFieldNames, "`data_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheForkDataIdPrefix     = "cache:fork:dataId:"
	cacheForkForkRepoIdPrefix = "cache:fork:forkRepoId:"
)

type (
	forkModel interface {
		Insert(ctx context.Context, data *Fork) (sql.Result, error)
		FindOne(ctx context.Context, dataId uint64) (*Fork, error)
		FindOneByForkRepoId(ctx context.Context, forkRepoId uint64) (*Fork, error)
		Update(ctx context.Context, data *Fork) error
		Delete(ctx context.Context, dataId uint64) error
	}

	defaultForkModel struct {
		sqlc.CachedConn
		table string
	}

	Fork struct {
		DataId         uint64    `db:"data_id"`
		DataCreateAt   time.Time `db:"data_create_at"`
		DataUpdateAt   time.Time `db:"data_update_at"`
		OriginalRepoId uint64    `db:"original_repo_id"`
		ForkRepoId     uint64    `db:"fork_repo_id"`
	}
)

func newForkModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultForkModel {
	return &defaultForkModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`fork`",
	}
}

func (m *defaultForkModel) Delete(ctx context.Context, dataId uint64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	forkDataIdKey := fmt.Sprintf("%s%v", cacheForkDataIdPrefix, dataId)
	forkForkRepoIdKey := fmt.Sprintf("%s%v", cacheForkForkRepoIdPrefix, data.ForkRepoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `data_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, forkDataIdKey, forkForkRepoIdKey)
	return err
}

func (m *defaultForkModel) FindOne(ctx context.Context, dataId uint64) (*Fork, error) {
	forkDataIdKey := fmt.Sprintf("%s%v", cacheForkDataIdPrefix, dataId)
	var resp Fork
	err := m.QueryRowCtx(ctx, &resp, forkDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", forkRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultForkModel) FindOneByForkRepoId(ctx context.Context, forkRepoId uint64) (*Fork, error) {
	forkForkRepoIdKey := fmt.Sprintf("%s%v", cacheForkForkRepoIdPrefix, forkRepoId)
	var resp Fork
	err := m.QueryRowIndexCtx(ctx, &resp, forkForkRepoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `fork_repo_id` = ? limit 1", forkRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, forkRepoId); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultForkModel) Insert(ctx context.Context, data *Fork) (sql.Result, error) {
	forkDataIdKey := fmt.Sprintf("%s%v", cacheForkDataIdPrefix, data.DataId)
	forkForkRepoIdKey := fmt.Sprintf("%s%v", cacheForkForkRepoIdPrefix, data.ForkRepoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, forkRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataCreateAt, data.DataUpdateAt, data.OriginalRepoId, data.ForkRepoId)
	}, forkDataIdKey, forkForkRepoIdKey)
	return ret, err
}

func (m *defaultForkModel) Update(ctx context.Context, newData *Fork) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	forkDataIdKey := fmt.Sprintf("%s%v", cacheForkDataIdPrefix, data.DataId)
	forkForkRepoIdKey := fmt.Sprintf("%s%v", cacheForkForkRepoIdPrefix, data.ForkRepoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `data_id` = ?", m.table, forkRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataCreateAt, newData.DataUpdateAt, newData.OriginalRepoId, newData.ForkRepoId, newData.DataId)
	}, forkDataIdKey, forkForkRepoIdKey)
	return err
}

func (m *defaultForkModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheForkDataIdPrefix, primary)
}

func (m *defaultForkModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `data_id` = ? limit 1", forkRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultForkModel) tableName() string {
	return m.table
}
