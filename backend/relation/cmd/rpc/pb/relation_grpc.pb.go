// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: relation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Relation_AddCreateRepo_FullMethodName                = "/pb.relation/AddCreateRepo"
	Relation_DelCreateRepo_FullMethodName                = "/pb.relation/DelCreateRepo"
	Relation_DelAllCreatedRepo_FullMethodName            = "/pb.relation/DelAllCreatedRepo"
	Relation_GetCreatorId_FullMethodName                 = "/pb.relation/GetCreatorId"
	Relation_SearchCreatedRepo_FullMethodName            = "/pb.relation/SearchCreatedRepo"
	Relation_BlockUntilCreatedRepoUpdated_FullMethodName = "/pb.relation/BlockUntilCreatedRepoUpdated"
	Relation_AddFollow_FullMethodName                    = "/pb.relation/AddFollow"
	Relation_DelFollow_FullMethodName                    = "/pb.relation/DelFollow"
	Relation_DelAllFollower_FullMethodName               = "/pb.relation/DelAllFollower"
	Relation_DelAllFollowing_FullMethodName              = "/pb.relation/DelAllFollowing"
	Relation_CheckIfFollow_FullMethodName                = "/pb.relation/CheckIfFollow"
	Relation_SearchFollowingByDeveloperId_FullMethodName = "/pb.relation/SearchFollowingByDeveloperId"
	Relation_SearchFollowerByDeveloperId_FullMethodName  = "/pb.relation/SearchFollowerByDeveloperId"
	Relation_BlockUntilFollowingUpdated_FullMethodName   = "/pb.relation/BlockUntilFollowingUpdated"
	Relation_BlockUntilFollowerUpdated_FullMethodName    = "/pb.relation/BlockUntilFollowerUpdated"
	Relation_AddFork_FullMethodName                      = "/pb.relation/AddFork"
	Relation_DelFork_FullMethodName                      = "/pb.relation/DelFork"
	Relation_DelAllFork_FullMethodName                   = "/pb.relation/DelAllFork"
	Relation_GetOrigin_FullMethodName                    = "/pb.relation/GetOrigin"
	Relation_SearchFork_FullMethodName                   = "/pb.relation/SearchFork"
	Relation_BlockUntilForkUpdated_FullMethodName        = "/pb.relation/BlockUntilForkUpdated"
	Relation_AddStar_FullMethodName                      = "/pb.relation/AddStar"
	Relation_DelStar_FullMethodName                      = "/pb.relation/DelStar"
	Relation_DelAllStarredRepo_FullMethodName            = "/pb.relation/DelAllStarredRepo"
	Relation_DelAllStaringDev_FullMethodName             = "/pb.relation/DelAllStaringDev"
	Relation_CheckIfStar_FullMethodName                  = "/pb.relation/CheckIfStar"
	Relation_SearchStarredRepo_FullMethodName            = "/pb.relation/SearchStarredRepo"
	Relation_SearchStaringDev_FullMethodName             = "/pb.relation/SearchStaringDev"
	Relation_BlockUntilStarredRepoUpdated_FullMethodName = "/pb.relation/BlockUntilStarredRepoUpdated"
)

// RelationClient is the client API for Relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationClient interface {
	// -----------------------createRepo-----------------------
	AddCreateRepo(ctx context.Context, in *AddCreateRepoReq, opts ...grpc.CallOption) (*AddCreateRepoResp, error)
	DelCreateRepo(ctx context.Context, in *DelCreateRepoReq, opts ...grpc.CallOption) (*DelCreateRepoResp, error)
	DelAllCreatedRepo(ctx context.Context, in *DelAllCreatedRepoReq, opts ...grpc.CallOption) (*DelAllCreatedRepoResp, error)
	GetCreatorId(ctx context.Context, in *GetCreatorIdReq, opts ...grpc.CallOption) (*GetCreatorIdResp, error)
	SearchCreatedRepo(ctx context.Context, in *SearchCreatedRepoReq, opts ...grpc.CallOption) (*SearchCreatedRepoResp, error)
	BlockUntilCreatedRepoUpdated(ctx context.Context, in *BlockUntilCreatedRepoUpdatedReq, opts ...grpc.CallOption) (*BlockUntilCreatedRepoUpdatedResp, error)
	// -----------------------follow-----------------------
	AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*AddFollowResp, error)
	DelFollow(ctx context.Context, in *DelFollowReq, opts ...grpc.CallOption) (*DelFollowResp, error)
	DelAllFollower(ctx context.Context, in *DelAllFollowerReq, opts ...grpc.CallOption) (*DelAllFollowerResp, error)
	DelAllFollowing(ctx context.Context, in *DelAllFollowingReq, opts ...grpc.CallOption) (*DelAllFollowingResp, error)
	CheckIfFollow(ctx context.Context, in *CheckIfFollowReq, opts ...grpc.CallOption) (*CheckFollowResp, error)
	SearchFollowingByDeveloperId(ctx context.Context, in *SearchFollowingByDeveloperIdReq, opts ...grpc.CallOption) (*SearchFollowingByDeveloperIdResp, error)
	SearchFollowerByDeveloperId(ctx context.Context, in *SearchFollowerByDeveloperIdReq, opts ...grpc.CallOption) (*SearchFollowerByDeveloperIdResp, error)
	BlockUntilFollowingUpdated(ctx context.Context, in *BlockUntilFollowingUpdatedReq, opts ...grpc.CallOption) (*BlockUntilFollowingUpdatedResp, error)
	BlockUntilFollowerUpdated(ctx context.Context, in *BlockUntilFollowerUpdatedReq, opts ...grpc.CallOption) (*BlockUntilFollowerUpdatedResp, error)
	// -----------------------fork-----------------------
	AddFork(ctx context.Context, in *AddForkReq, opts ...grpc.CallOption) (*AddForkResp, error)
	DelFork(ctx context.Context, in *DelForkReq, opts ...grpc.CallOption) (*DelForkResp, error)
	DelAllFork(ctx context.Context, in *DelAllForkReq, opts ...grpc.CallOption) (*DelAllForkResp, error)
	GetOrigin(ctx context.Context, in *GetOriginReq, opts ...grpc.CallOption) (*GetOriginResp, error)
	SearchFork(ctx context.Context, in *SearchForkReq, opts ...grpc.CallOption) (*SearchForkResp, error)
	BlockUntilForkUpdated(ctx context.Context, in *BlockUntilForkUpdatedReq, opts ...grpc.CallOption) (*BlockUntilForkUpdatedResp, error)
	// -----------------------star-----------------------
	AddStar(ctx context.Context, in *AddStarReq, opts ...grpc.CallOption) (*AddStarResp, error)
	DelStar(ctx context.Context, in *DelStarReq, opts ...grpc.CallOption) (*DelStarResp, error)
	DelAllStarredRepo(ctx context.Context, in *DelAllStarredRepoReq, opts ...grpc.CallOption) (*DelAllStarredRepoResp, error)
	DelAllStaringDev(ctx context.Context, in *DelAllStaringDevReq, opts ...grpc.CallOption) (*DelAllStaringDevResp, error)
	CheckIfStar(ctx context.Context, in *CheckIfStarReq, opts ...grpc.CallOption) (*CheckIfStarResp, error)
	SearchStarredRepo(ctx context.Context, in *SearchStarredRepoReq, opts ...grpc.CallOption) (*SearchStarredRepoResp, error)
	SearchStaringDev(ctx context.Context, in *SearchStaringDevReq, opts ...grpc.CallOption) (*SearchStaringDevResp, error)
	BlockUntilStarredRepoUpdated(ctx context.Context, in *BlockUntilStarredRepoUpdatedReq, opts ...grpc.CallOption) (*BlockUntilStarredRepoUpdatedResp, error)
}

type relationClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationClient(cc grpc.ClientConnInterface) RelationClient {
	return &relationClient{cc}
}

func (c *relationClient) AddCreateRepo(ctx context.Context, in *AddCreateRepoReq, opts ...grpc.CallOption) (*AddCreateRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCreateRepoResp)
	err := c.cc.Invoke(ctx, Relation_AddCreateRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelCreateRepo(ctx context.Context, in *DelCreateRepoReq, opts ...grpc.CallOption) (*DelCreateRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelCreateRepoResp)
	err := c.cc.Invoke(ctx, Relation_DelCreateRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllCreatedRepo(ctx context.Context, in *DelAllCreatedRepoReq, opts ...grpc.CallOption) (*DelAllCreatedRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAllCreatedRepoResp)
	err := c.cc.Invoke(ctx, Relation_DelAllCreatedRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetCreatorId(ctx context.Context, in *GetCreatorIdReq, opts ...grpc.CallOption) (*GetCreatorIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreatorIdResp)
	err := c.cc.Invoke(ctx, Relation_GetCreatorId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchCreatedRepo(ctx context.Context, in *SearchCreatedRepoReq, opts ...grpc.CallOption) (*SearchCreatedRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCreatedRepoResp)
	err := c.cc.Invoke(ctx, Relation_SearchCreatedRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) BlockUntilCreatedRepoUpdated(ctx context.Context, in *BlockUntilCreatedRepoUpdatedReq, opts ...grpc.CallOption) (*BlockUntilCreatedRepoUpdatedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUntilCreatedRepoUpdatedResp)
	err := c.cc.Invoke(ctx, Relation_BlockUntilCreatedRepoUpdated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*AddFollowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFollowResp)
	err := c.cc.Invoke(ctx, Relation_AddFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelFollow(ctx context.Context, in *DelFollowReq, opts ...grpc.CallOption) (*DelFollowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelFollowResp)
	err := c.cc.Invoke(ctx, Relation_DelFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllFollower(ctx context.Context, in *DelAllFollowerReq, opts ...grpc.CallOption) (*DelAllFollowerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAllFollowerResp)
	err := c.cc.Invoke(ctx, Relation_DelAllFollower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllFollowing(ctx context.Context, in *DelAllFollowingReq, opts ...grpc.CallOption) (*DelAllFollowingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAllFollowingResp)
	err := c.cc.Invoke(ctx, Relation_DelAllFollowing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) CheckIfFollow(ctx context.Context, in *CheckIfFollowReq, opts ...grpc.CallOption) (*CheckFollowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckFollowResp)
	err := c.cc.Invoke(ctx, Relation_CheckIfFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchFollowingByDeveloperId(ctx context.Context, in *SearchFollowingByDeveloperIdReq, opts ...grpc.CallOption) (*SearchFollowingByDeveloperIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFollowingByDeveloperIdResp)
	err := c.cc.Invoke(ctx, Relation_SearchFollowingByDeveloperId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchFollowerByDeveloperId(ctx context.Context, in *SearchFollowerByDeveloperIdReq, opts ...grpc.CallOption) (*SearchFollowerByDeveloperIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFollowerByDeveloperIdResp)
	err := c.cc.Invoke(ctx, Relation_SearchFollowerByDeveloperId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) BlockUntilFollowingUpdated(ctx context.Context, in *BlockUntilFollowingUpdatedReq, opts ...grpc.CallOption) (*BlockUntilFollowingUpdatedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUntilFollowingUpdatedResp)
	err := c.cc.Invoke(ctx, Relation_BlockUntilFollowingUpdated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) BlockUntilFollowerUpdated(ctx context.Context, in *BlockUntilFollowerUpdatedReq, opts ...grpc.CallOption) (*BlockUntilFollowerUpdatedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUntilFollowerUpdatedResp)
	err := c.cc.Invoke(ctx, Relation_BlockUntilFollowerUpdated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddFork(ctx context.Context, in *AddForkReq, opts ...grpc.CallOption) (*AddForkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddForkResp)
	err := c.cc.Invoke(ctx, Relation_AddFork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelFork(ctx context.Context, in *DelForkReq, opts ...grpc.CallOption) (*DelForkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelForkResp)
	err := c.cc.Invoke(ctx, Relation_DelFork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllFork(ctx context.Context, in *DelAllForkReq, opts ...grpc.CallOption) (*DelAllForkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAllForkResp)
	err := c.cc.Invoke(ctx, Relation_DelAllFork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetOrigin(ctx context.Context, in *GetOriginReq, opts ...grpc.CallOption) (*GetOriginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOriginResp)
	err := c.cc.Invoke(ctx, Relation_GetOrigin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchFork(ctx context.Context, in *SearchForkReq, opts ...grpc.CallOption) (*SearchForkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchForkResp)
	err := c.cc.Invoke(ctx, Relation_SearchFork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) BlockUntilForkUpdated(ctx context.Context, in *BlockUntilForkUpdatedReq, opts ...grpc.CallOption) (*BlockUntilForkUpdatedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUntilForkUpdatedResp)
	err := c.cc.Invoke(ctx, Relation_BlockUntilForkUpdated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddStar(ctx context.Context, in *AddStarReq, opts ...grpc.CallOption) (*AddStarResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStarResp)
	err := c.cc.Invoke(ctx, Relation_AddStar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelStar(ctx context.Context, in *DelStarReq, opts ...grpc.CallOption) (*DelStarResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelStarResp)
	err := c.cc.Invoke(ctx, Relation_DelStar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllStarredRepo(ctx context.Context, in *DelAllStarredRepoReq, opts ...grpc.CallOption) (*DelAllStarredRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAllStarredRepoResp)
	err := c.cc.Invoke(ctx, Relation_DelAllStarredRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelAllStaringDev(ctx context.Context, in *DelAllStaringDevReq, opts ...grpc.CallOption) (*DelAllStaringDevResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAllStaringDevResp)
	err := c.cc.Invoke(ctx, Relation_DelAllStaringDev_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) CheckIfStar(ctx context.Context, in *CheckIfStarReq, opts ...grpc.CallOption) (*CheckIfStarResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIfStarResp)
	err := c.cc.Invoke(ctx, Relation_CheckIfStar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchStarredRepo(ctx context.Context, in *SearchStarredRepoReq, opts ...grpc.CallOption) (*SearchStarredRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchStarredRepoResp)
	err := c.cc.Invoke(ctx, Relation_SearchStarredRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SearchStaringDev(ctx context.Context, in *SearchStaringDevReq, opts ...grpc.CallOption) (*SearchStaringDevResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchStaringDevResp)
	err := c.cc.Invoke(ctx, Relation_SearchStaringDev_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) BlockUntilStarredRepoUpdated(ctx context.Context, in *BlockUntilStarredRepoUpdatedReq, opts ...grpc.CallOption) (*BlockUntilStarredRepoUpdatedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUntilStarredRepoUpdatedResp)
	err := c.cc.Invoke(ctx, Relation_BlockUntilStarredRepoUpdated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServer is the server API for Relation service.
// All implementations must embed UnimplementedRelationServer
// for forward compatibility.
type RelationServer interface {
	// -----------------------createRepo-----------------------
	AddCreateRepo(context.Context, *AddCreateRepoReq) (*AddCreateRepoResp, error)
	DelCreateRepo(context.Context, *DelCreateRepoReq) (*DelCreateRepoResp, error)
	DelAllCreatedRepo(context.Context, *DelAllCreatedRepoReq) (*DelAllCreatedRepoResp, error)
	GetCreatorId(context.Context, *GetCreatorIdReq) (*GetCreatorIdResp, error)
	SearchCreatedRepo(context.Context, *SearchCreatedRepoReq) (*SearchCreatedRepoResp, error)
	BlockUntilCreatedRepoUpdated(context.Context, *BlockUntilCreatedRepoUpdatedReq) (*BlockUntilCreatedRepoUpdatedResp, error)
	// -----------------------follow-----------------------
	AddFollow(context.Context, *AddFollowReq) (*AddFollowResp, error)
	DelFollow(context.Context, *DelFollowReq) (*DelFollowResp, error)
	DelAllFollower(context.Context, *DelAllFollowerReq) (*DelAllFollowerResp, error)
	DelAllFollowing(context.Context, *DelAllFollowingReq) (*DelAllFollowingResp, error)
	CheckIfFollow(context.Context, *CheckIfFollowReq) (*CheckFollowResp, error)
	SearchFollowingByDeveloperId(context.Context, *SearchFollowingByDeveloperIdReq) (*SearchFollowingByDeveloperIdResp, error)
	SearchFollowerByDeveloperId(context.Context, *SearchFollowerByDeveloperIdReq) (*SearchFollowerByDeveloperIdResp, error)
	BlockUntilFollowingUpdated(context.Context, *BlockUntilFollowingUpdatedReq) (*BlockUntilFollowingUpdatedResp, error)
	BlockUntilFollowerUpdated(context.Context, *BlockUntilFollowerUpdatedReq) (*BlockUntilFollowerUpdatedResp, error)
	// -----------------------fork-----------------------
	AddFork(context.Context, *AddForkReq) (*AddForkResp, error)
	DelFork(context.Context, *DelForkReq) (*DelForkResp, error)
	DelAllFork(context.Context, *DelAllForkReq) (*DelAllForkResp, error)
	GetOrigin(context.Context, *GetOriginReq) (*GetOriginResp, error)
	SearchFork(context.Context, *SearchForkReq) (*SearchForkResp, error)
	BlockUntilForkUpdated(context.Context, *BlockUntilForkUpdatedReq) (*BlockUntilForkUpdatedResp, error)
	// -----------------------star-----------------------
	AddStar(context.Context, *AddStarReq) (*AddStarResp, error)
	DelStar(context.Context, *DelStarReq) (*DelStarResp, error)
	DelAllStarredRepo(context.Context, *DelAllStarredRepoReq) (*DelAllStarredRepoResp, error)
	DelAllStaringDev(context.Context, *DelAllStaringDevReq) (*DelAllStaringDevResp, error)
	CheckIfStar(context.Context, *CheckIfStarReq) (*CheckIfStarResp, error)
	SearchStarredRepo(context.Context, *SearchStarredRepoReq) (*SearchStarredRepoResp, error)
	SearchStaringDev(context.Context, *SearchStaringDevReq) (*SearchStaringDevResp, error)
	BlockUntilStarredRepoUpdated(context.Context, *BlockUntilStarredRepoUpdatedReq) (*BlockUntilStarredRepoUpdatedResp, error)
	mustEmbedUnimplementedRelationServer()
}

// UnimplementedRelationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationServer struct{}

func (UnimplementedRelationServer) AddCreateRepo(context.Context, *AddCreateRepoReq) (*AddCreateRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCreateRepo not implemented")
}
func (UnimplementedRelationServer) DelCreateRepo(context.Context, *DelCreateRepoReq) (*DelCreateRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCreateRepo not implemented")
}
func (UnimplementedRelationServer) DelAllCreatedRepo(context.Context, *DelAllCreatedRepoReq) (*DelAllCreatedRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllCreatedRepo not implemented")
}
func (UnimplementedRelationServer) GetCreatorId(context.Context, *GetCreatorIdReq) (*GetCreatorIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatorId not implemented")
}
func (UnimplementedRelationServer) SearchCreatedRepo(context.Context, *SearchCreatedRepoReq) (*SearchCreatedRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCreatedRepo not implemented")
}
func (UnimplementedRelationServer) BlockUntilCreatedRepoUpdated(context.Context, *BlockUntilCreatedRepoUpdatedReq) (*BlockUntilCreatedRepoUpdatedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUntilCreatedRepoUpdated not implemented")
}
func (UnimplementedRelationServer) AddFollow(context.Context, *AddFollowReq) (*AddFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollow not implemented")
}
func (UnimplementedRelationServer) DelFollow(context.Context, *DelFollowReq) (*DelFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFollow not implemented")
}
func (UnimplementedRelationServer) DelAllFollower(context.Context, *DelAllFollowerReq) (*DelAllFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllFollower not implemented")
}
func (UnimplementedRelationServer) DelAllFollowing(context.Context, *DelAllFollowingReq) (*DelAllFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllFollowing not implemented")
}
func (UnimplementedRelationServer) CheckIfFollow(context.Context, *CheckIfFollowReq) (*CheckFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfFollow not implemented")
}
func (UnimplementedRelationServer) SearchFollowingByDeveloperId(context.Context, *SearchFollowingByDeveloperIdReq) (*SearchFollowingByDeveloperIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFollowingByDeveloperId not implemented")
}
func (UnimplementedRelationServer) SearchFollowerByDeveloperId(context.Context, *SearchFollowerByDeveloperIdReq) (*SearchFollowerByDeveloperIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFollowerByDeveloperId not implemented")
}
func (UnimplementedRelationServer) BlockUntilFollowingUpdated(context.Context, *BlockUntilFollowingUpdatedReq) (*BlockUntilFollowingUpdatedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUntilFollowingUpdated not implemented")
}
func (UnimplementedRelationServer) BlockUntilFollowerUpdated(context.Context, *BlockUntilFollowerUpdatedReq) (*BlockUntilFollowerUpdatedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUntilFollowerUpdated not implemented")
}
func (UnimplementedRelationServer) AddFork(context.Context, *AddForkReq) (*AddForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFork not implemented")
}
func (UnimplementedRelationServer) DelFork(context.Context, *DelForkReq) (*DelForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFork not implemented")
}
func (UnimplementedRelationServer) DelAllFork(context.Context, *DelAllForkReq) (*DelAllForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllFork not implemented")
}
func (UnimplementedRelationServer) GetOrigin(context.Context, *GetOriginReq) (*GetOriginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrigin not implemented")
}
func (UnimplementedRelationServer) SearchFork(context.Context, *SearchForkReq) (*SearchForkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFork not implemented")
}
func (UnimplementedRelationServer) BlockUntilForkUpdated(context.Context, *BlockUntilForkUpdatedReq) (*BlockUntilForkUpdatedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUntilForkUpdated not implemented")
}
func (UnimplementedRelationServer) AddStar(context.Context, *AddStarReq) (*AddStarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStar not implemented")
}
func (UnimplementedRelationServer) DelStar(context.Context, *DelStarReq) (*DelStarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStar not implemented")
}
func (UnimplementedRelationServer) DelAllStarredRepo(context.Context, *DelAllStarredRepoReq) (*DelAllStarredRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllStarredRepo not implemented")
}
func (UnimplementedRelationServer) DelAllStaringDev(context.Context, *DelAllStaringDevReq) (*DelAllStaringDevResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllStaringDev not implemented")
}
func (UnimplementedRelationServer) CheckIfStar(context.Context, *CheckIfStarReq) (*CheckIfStarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfStar not implemented")
}
func (UnimplementedRelationServer) SearchStarredRepo(context.Context, *SearchStarredRepoReq) (*SearchStarredRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStarredRepo not implemented")
}
func (UnimplementedRelationServer) SearchStaringDev(context.Context, *SearchStaringDevReq) (*SearchStaringDevResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStaringDev not implemented")
}
func (UnimplementedRelationServer) BlockUntilStarredRepoUpdated(context.Context, *BlockUntilStarredRepoUpdatedReq) (*BlockUntilStarredRepoUpdatedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUntilStarredRepoUpdated not implemented")
}
func (UnimplementedRelationServer) mustEmbedUnimplementedRelationServer() {}
func (UnimplementedRelationServer) testEmbeddedByValue()                  {}

// UnsafeRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServer will
// result in compilation errors.
type UnsafeRelationServer interface {
	mustEmbedUnimplementedRelationServer()
}

func RegisterRelationServer(s grpc.ServiceRegistrar, srv RelationServer) {
	// If the following call pancis, it indicates UnimplementedRelationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Relation_ServiceDesc, srv)
}

func _Relation_AddCreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddCreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_AddCreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddCreateRepo(ctx, req.(*AddCreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelCreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelCreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelCreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelCreateRepo(ctx, req.(*DelCreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllCreatedRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllCreatedRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllCreatedRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllCreatedRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllCreatedRepo(ctx, req.(*DelAllCreatedRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetCreatorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreatorIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetCreatorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetCreatorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetCreatorId(ctx, req.(*GetCreatorIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchCreatedRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCreatedRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchCreatedRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchCreatedRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchCreatedRepo(ctx, req.(*SearchCreatedRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_BlockUntilCreatedRepoUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUntilCreatedRepoUpdatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).BlockUntilCreatedRepoUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_BlockUntilCreatedRepoUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).BlockUntilCreatedRepoUpdated(ctx, req.(*BlockUntilCreatedRepoUpdatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_AddFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddFollow(ctx, req.(*AddFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelFollow(ctx, req.(*DelFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllFollower(ctx, req.(*DelAllFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllFollowing(ctx, req.(*DelAllFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_CheckIfFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).CheckIfFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_CheckIfFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).CheckIfFollow(ctx, req.(*CheckIfFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchFollowingByDeveloperId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFollowingByDeveloperIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchFollowingByDeveloperId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchFollowingByDeveloperId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchFollowingByDeveloperId(ctx, req.(*SearchFollowingByDeveloperIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchFollowerByDeveloperId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFollowerByDeveloperIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchFollowerByDeveloperId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchFollowerByDeveloperId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchFollowerByDeveloperId(ctx, req.(*SearchFollowerByDeveloperIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_BlockUntilFollowingUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUntilFollowingUpdatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).BlockUntilFollowingUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_BlockUntilFollowingUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).BlockUntilFollowingUpdated(ctx, req.(*BlockUntilFollowingUpdatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_BlockUntilFollowerUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUntilFollowerUpdatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).BlockUntilFollowerUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_BlockUntilFollowerUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).BlockUntilFollowerUpdated(ctx, req.(*BlockUntilFollowerUpdatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_AddFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddFork(ctx, req.(*AddForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelFork(ctx, req.(*DelForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllFork(ctx, req.(*DelAllForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetOrigin(ctx, req.(*GetOriginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchForkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchFork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchFork(ctx, req.(*SearchForkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_BlockUntilForkUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUntilForkUpdatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).BlockUntilForkUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_BlockUntilForkUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).BlockUntilForkUpdated(ctx, req.(*BlockUntilForkUpdatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_AddStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddStar(ctx, req.(*AddStarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelStar(ctx, req.(*DelStarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllStarredRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllStarredRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllStarredRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllStarredRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllStarredRepo(ctx, req.(*DelAllStarredRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelAllStaringDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllStaringDevReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelAllStaringDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_DelAllStaringDev_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelAllStaringDev(ctx, req.(*DelAllStaringDevReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_CheckIfStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfStarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).CheckIfStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_CheckIfStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).CheckIfStar(ctx, req.(*CheckIfStarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchStarredRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStarredRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchStarredRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchStarredRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchStarredRepo(ctx, req.(*SearchStarredRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SearchStaringDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStaringDevReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SearchStaringDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_SearchStaringDev_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SearchStaringDev(ctx, req.(*SearchStaringDevReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_BlockUntilStarredRepoUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUntilStarredRepoUpdatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).BlockUntilStarredRepoUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_BlockUntilStarredRepoUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).BlockUntilStarredRepoUpdated(ctx, req.(*BlockUntilStarredRepoUpdatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Relation_ServiceDesc is the grpc.ServiceDesc for Relation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.relation",
	HandlerType: (*RelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCreateRepo",
			Handler:    _Relation_AddCreateRepo_Handler,
		},
		{
			MethodName: "DelCreateRepo",
			Handler:    _Relation_DelCreateRepo_Handler,
		},
		{
			MethodName: "DelAllCreatedRepo",
			Handler:    _Relation_DelAllCreatedRepo_Handler,
		},
		{
			MethodName: "GetCreatorId",
			Handler:    _Relation_GetCreatorId_Handler,
		},
		{
			MethodName: "SearchCreatedRepo",
			Handler:    _Relation_SearchCreatedRepo_Handler,
		},
		{
			MethodName: "BlockUntilCreatedRepoUpdated",
			Handler:    _Relation_BlockUntilCreatedRepoUpdated_Handler,
		},
		{
			MethodName: "AddFollow",
			Handler:    _Relation_AddFollow_Handler,
		},
		{
			MethodName: "DelFollow",
			Handler:    _Relation_DelFollow_Handler,
		},
		{
			MethodName: "DelAllFollower",
			Handler:    _Relation_DelAllFollower_Handler,
		},
		{
			MethodName: "DelAllFollowing",
			Handler:    _Relation_DelAllFollowing_Handler,
		},
		{
			MethodName: "CheckIfFollow",
			Handler:    _Relation_CheckIfFollow_Handler,
		},
		{
			MethodName: "SearchFollowingByDeveloperId",
			Handler:    _Relation_SearchFollowingByDeveloperId_Handler,
		},
		{
			MethodName: "SearchFollowerByDeveloperId",
			Handler:    _Relation_SearchFollowerByDeveloperId_Handler,
		},
		{
			MethodName: "BlockUntilFollowingUpdated",
			Handler:    _Relation_BlockUntilFollowingUpdated_Handler,
		},
		{
			MethodName: "BlockUntilFollowerUpdated",
			Handler:    _Relation_BlockUntilFollowerUpdated_Handler,
		},
		{
			MethodName: "AddFork",
			Handler:    _Relation_AddFork_Handler,
		},
		{
			MethodName: "DelFork",
			Handler:    _Relation_DelFork_Handler,
		},
		{
			MethodName: "DelAllFork",
			Handler:    _Relation_DelAllFork_Handler,
		},
		{
			MethodName: "GetOrigin",
			Handler:    _Relation_GetOrigin_Handler,
		},
		{
			MethodName: "SearchFork",
			Handler:    _Relation_SearchFork_Handler,
		},
		{
			MethodName: "BlockUntilForkUpdated",
			Handler:    _Relation_BlockUntilForkUpdated_Handler,
		},
		{
			MethodName: "AddStar",
			Handler:    _Relation_AddStar_Handler,
		},
		{
			MethodName: "DelStar",
			Handler:    _Relation_DelStar_Handler,
		},
		{
			MethodName: "DelAllStarredRepo",
			Handler:    _Relation_DelAllStarredRepo_Handler,
		},
		{
			MethodName: "DelAllStaringDev",
			Handler:    _Relation_DelAllStaringDev_Handler,
		},
		{
			MethodName: "CheckIfStar",
			Handler:    _Relation_CheckIfStar_Handler,
		},
		{
			MethodName: "SearchStarredRepo",
			Handler:    _Relation_SearchStarredRepo_Handler,
		},
		{
			MethodName: "SearchStaringDev",
			Handler:    _Relation_SearchStaringDev_Handler,
		},
		{
			MethodName: "BlockUntilStarredRepoUpdated",
			Handler:    _Relation_BlockUntilStarredRepoUpdated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
