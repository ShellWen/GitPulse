// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	nationFieldNames          = builder.RawFieldNames(&Nation{}, true)
	nationRows                = strings.Join(nationFieldNames, ",")
	nationRowsExpectAutoSet   = strings.Join(stringx.Remove(nationFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	nationRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(nationFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheAnalysisNationDataIdPrefix      = "cache:analysis:nation:dataId:"
	cacheAnalysisNationDeveloperIdPrefix = "cache:analysis:nation:developerId:"
)

type (
	nationModel interface {
		Insert(ctx context.Context, data *Nation) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Nation, error)
		FindOneByDeveloperId(ctx context.Context, developerId int64) (*Nation, error)
		Update(ctx context.Context, data *Nation) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultNationModel struct {
		sqlc.CachedConn
		table string
	}

	Nation struct {
		DataId        int64     `db:"data_id"`
		DataCreatedAt time.Time `db:"data_created_at"`
		DataUpdatedAt time.Time `db:"data_updated_at"`
		DeveloperId   int64     `db:"developer_id"`
		Nation        string    `db:"nation"`
	}
)

func newNationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultNationModel {
	return &defaultNationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"analysis"."nation"`,
	}
}

func (m *defaultNationModel) Delete(ctx context.Context, dataId int64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	analysisNationDataIdKey := fmt.Sprintf("%s%v", cacheAnalysisNationDataIdPrefix, dataId)
	analysisNationDeveloperIdKey := fmt.Sprintf("%s%v", cacheAnalysisNationDeveloperIdPrefix, data.DeveloperId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where data_id = $1", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, analysisNationDataIdKey, analysisNationDeveloperIdKey)
	return err
}

func (m *defaultNationModel) FindOne(ctx context.Context, dataId int64) (*Nation, error) {
	analysisNationDataIdKey := fmt.Sprintf("%s%v", cacheAnalysisNationDataIdPrefix, dataId)
	var resp Nation
	err := m.QueryRowCtx(ctx, &resp, analysisNationDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", nationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNationModel) FindOneByDeveloperId(ctx context.Context, developerId int64) (*Nation, error) {
	analysisNationDeveloperIdKey := fmt.Sprintf("%s%v", cacheAnalysisNationDeveloperIdPrefix, developerId)
	var resp Nation
	err := m.QueryRowIndexCtx(ctx, &resp, analysisNationDeveloperIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where developer_id = $1 limit 1", nationRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, developerId); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNationModel) Insert(ctx context.Context, data *Nation) (sql.Result, error) {
	analysisNationDataIdKey := fmt.Sprintf("%s%v", cacheAnalysisNationDataIdPrefix, data.DataId)
	analysisNationDeveloperIdKey := fmt.Sprintf("%s%v", cacheAnalysisNationDeveloperIdPrefix, data.DeveloperId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, nationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataCreatedAt, data.DataUpdatedAt, data.DeveloperId, data.Nation)
	}, analysisNationDataIdKey, analysisNationDeveloperIdKey)
	return ret, err
}

func (m *defaultNationModel) Update(ctx context.Context, newData *Nation) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	analysisNationDataIdKey := fmt.Sprintf("%s%v", cacheAnalysisNationDataIdPrefix, data.DataId)
	analysisNationDeveloperIdKey := fmt.Sprintf("%s%v", cacheAnalysisNationDeveloperIdPrefix, data.DeveloperId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where data_id = $1", m.table, nationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataId, newData.DataCreatedAt, newData.DataUpdatedAt, newData.DeveloperId, newData.Nation)
	}, analysisNationDataIdKey, analysisNationDeveloperIdKey)
	return err
}

func (m *defaultNationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAnalysisNationDataIdPrefix, primary)
}

func (m *defaultNationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", nationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNationModel) tableName() string {
	return m.table
}
