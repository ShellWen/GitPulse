// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	analysisFieldNames          = builder.RawFieldNames(&Analysis{}, true)
	analysisRows                = strings.Join(analysisFieldNames, ",")
	analysisRowsExpectAutoSet   = strings.Join(stringx.Remove(analysisFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	analysisRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(analysisFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheAnalysisAnalysisDataIdPrefix      = "cache:analysis:analysis:dataId:"
	cacheAnalysisAnalysisDeveloperIdPrefix = "cache:analysis:analysis:developerId:"
)

type (
	analysisModel interface {
		Insert(ctx context.Context, data *Analysis) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Analysis, error)
		FindOneByDeveloperId(ctx context.Context, developerId int64) (*Analysis, error)
		Update(ctx context.Context, data *Analysis) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultAnalysisModel struct {
		sqlc.CachedConn
		table string
	}

	Analysis struct {
		DataId       int64     `db:"data_id"`
		DataCreateAt time.Time `db:"data_create_at"`
		DataUpdateAt time.Time `db:"data_update_at"`
		DeveloperId  int64     `db:"developer_id"`
		Languages    string    `db:"languages"`
		TalentRank   float64   `db:"talent_rank"`
		Nation       string    `db:"nation"`
	}
)

func newAnalysisModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAnalysisModel {
	return &defaultAnalysisModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"analysis"."analysis"`,
	}
}

func (m *defaultAnalysisModel) Delete(ctx context.Context, dataId int64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	analysisAnalysisDataIdKey := fmt.Sprintf("%s%v", cacheAnalysisAnalysisDataIdPrefix, dataId)
	analysisAnalysisDeveloperIdKey := fmt.Sprintf("%s%v", cacheAnalysisAnalysisDeveloperIdPrefix, data.DeveloperId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where data_id = $1", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, analysisAnalysisDataIdKey, analysisAnalysisDeveloperIdKey)
	return err
}

func (m *defaultAnalysisModel) FindOne(ctx context.Context, dataId int64) (*Analysis, error) {
	analysisAnalysisDataIdKey := fmt.Sprintf("%s%v", cacheAnalysisAnalysisDataIdPrefix, dataId)
	var resp Analysis
	err := m.QueryRowCtx(ctx, &resp, analysisAnalysisDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", analysisRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnalysisModel) FindOneByDeveloperId(ctx context.Context, developerId int64) (*Analysis, error) {
	analysisAnalysisDeveloperIdKey := fmt.Sprintf("%s%v", cacheAnalysisAnalysisDeveloperIdPrefix, developerId)
	var resp Analysis
	err := m.QueryRowIndexCtx(ctx, &resp, analysisAnalysisDeveloperIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where developer_id = $1 limit 1", analysisRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, developerId); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnalysisModel) Insert(ctx context.Context, data *Analysis) (sql.Result, error) {
	analysisAnalysisDataIdKey := fmt.Sprintf("%s%v", cacheAnalysisAnalysisDataIdPrefix, data.DataId)
	analysisAnalysisDeveloperIdKey := fmt.Sprintf("%s%v", cacheAnalysisAnalysisDeveloperIdPrefix, data.DeveloperId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, analysisRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataCreateAt, data.DataUpdateAt, data.DeveloperId, data.Languages, data.TalentRank, data.Nation)
	}, analysisAnalysisDataIdKey, analysisAnalysisDeveloperIdKey)
	return ret, err
}

func (m *defaultAnalysisModel) Update(ctx context.Context, newData *Analysis) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	analysisAnalysisDataIdKey := fmt.Sprintf("%s%v", cacheAnalysisAnalysisDataIdPrefix, data.DataId)
	analysisAnalysisDeveloperIdKey := fmt.Sprintf("%s%v", cacheAnalysisAnalysisDeveloperIdPrefix, data.DeveloperId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where data_id = $1", m.table, analysisRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataId, newData.DataCreateAt, newData.DataUpdateAt, newData.DeveloperId, newData.Languages, newData.TalentRank, newData.Nation)
	}, analysisAnalysisDataIdKey, analysisAnalysisDeveloperIdKey)
	return err
}

func (m *defaultAnalysisModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAnalysisAnalysisDataIdPrefix, primary)
}

func (m *defaultAnalysisModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", analysisRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAnalysisModel) tableName() string {
	return m.table
}
