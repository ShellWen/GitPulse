// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: analysis.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Analysis_DelLanguage_FullMethodName      = "/pb.analysis/DelLanguage"
	Analysis_DelRegion_FullMethodName        = "/pb.analysis/DelRegion"
	Analysis_DelPulsePoint_FullMethodName    = "/pb.analysis/DelPulsePoint"
	Analysis_DelSummary_FullMethodName       = "/pb.analysis/DelSummary"
	Analysis_UpdateLanguage_FullMethodName   = "/pb.analysis/UpdateLanguage"
	Analysis_UpdateRegion_FullMethodName     = "/pb.analysis/UpdateRegion"
	Analysis_UpdatePulsePoint_FullMethodName = "/pb.analysis/UpdatePulsePoint"
	Analysis_UpdateSummary_FullMethodName    = "/pb.analysis/UpdateSummary"
	Analysis_GetLanguages_FullMethodName     = "/pb.analysis/GetLanguages"
	Analysis_GetRegion_FullMethodName        = "/pb.analysis/GetRegion"
	Analysis_GetPulsePoint_FullMethodName    = "/pb.analysis/GetPulsePoint"
	Analysis_GetSummary_FullMethodName       = "/pb.analysis/GetSummary"
)

// AnalysisClient is the client API for Analysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalysisClient interface {
	// -----------------------analysis-----------------------
	DelLanguage(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
	DelRegion(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
	DelPulsePoint(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
	DelSummary(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
	UpdateLanguage(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
	UpdateRegion(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
	UpdatePulsePoint(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
	UpdateSummary(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
	GetLanguages(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetLanguagesResp, error)
	GetRegion(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetRegionResp, error)
	GetPulsePoint(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetPulsePointResp, error)
	GetSummary(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetSummaryResp, error)
}

type analysisClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisClient(cc grpc.ClientConnInterface) AnalysisClient {
	return &analysisClient{cc}
}

func (c *analysisClient) DelLanguage(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_DelLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) DelRegion(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_DelRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) DelPulsePoint(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_DelPulsePoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) DelSummary(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_DelSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) UpdateLanguage(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_UpdateLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) UpdateRegion(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_UpdateRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) UpdatePulsePoint(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_UpdatePulsePoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) UpdateSummary(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnalysisResp)
	err := c.cc.Invoke(ctx, Analysis_UpdateSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetLanguages(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetLanguagesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLanguagesResp)
	err := c.cc.Invoke(ctx, Analysis_GetLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetRegion(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetRegionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionResp)
	err := c.cc.Invoke(ctx, Analysis_GetRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetPulsePoint(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetPulsePointResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPulsePointResp)
	err := c.cc.Invoke(ctx, Analysis_GetPulsePoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetSummary(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetSummaryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSummaryResp)
	err := c.cc.Invoke(ctx, Analysis_GetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysisServer is the server API for Analysis service.
// All implementations must embed UnimplementedAnalysisServer
// for forward compatibility.
type AnalysisServer interface {
	// -----------------------analysis-----------------------
	DelLanguage(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error)
	DelRegion(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error)
	DelPulsePoint(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error)
	DelSummary(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error)
	UpdateLanguage(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error)
	UpdateRegion(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error)
	UpdatePulsePoint(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error)
	UpdateSummary(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error)
	GetLanguages(context.Context, *GetAnalysisReq) (*GetLanguagesResp, error)
	GetRegion(context.Context, *GetAnalysisReq) (*GetRegionResp, error)
	GetPulsePoint(context.Context, *GetAnalysisReq) (*GetPulsePointResp, error)
	GetSummary(context.Context, *GetAnalysisReq) (*GetSummaryResp, error)
	mustEmbedUnimplementedAnalysisServer()
}

// UnimplementedAnalysisServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalysisServer struct{}

func (UnimplementedAnalysisServer) DelLanguage(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLanguage not implemented")
}
func (UnimplementedAnalysisServer) DelRegion(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRegion not implemented")
}
func (UnimplementedAnalysisServer) DelPulsePoint(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPulsePoint not implemented")
}
func (UnimplementedAnalysisServer) DelSummary(context.Context, *DelAnalysisReq) (*DelAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSummary not implemented")
}
func (UnimplementedAnalysisServer) UpdateLanguage(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (UnimplementedAnalysisServer) UpdateRegion(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegion not implemented")
}
func (UnimplementedAnalysisServer) UpdatePulsePoint(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePulsePoint not implemented")
}
func (UnimplementedAnalysisServer) UpdateSummary(context.Context, *UpdateAnalysisReq) (*UpdateAnalysisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummary not implemented")
}
func (UnimplementedAnalysisServer) GetLanguages(context.Context, *GetAnalysisReq) (*GetLanguagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguages not implemented")
}
func (UnimplementedAnalysisServer) GetRegion(context.Context, *GetAnalysisReq) (*GetRegionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedAnalysisServer) GetPulsePoint(context.Context, *GetAnalysisReq) (*GetPulsePointResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPulsePoint not implemented")
}
func (UnimplementedAnalysisServer) GetSummary(context.Context, *GetAnalysisReq) (*GetSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedAnalysisServer) mustEmbedUnimplementedAnalysisServer() {}
func (UnimplementedAnalysisServer) testEmbeddedByValue()                  {}

// UnsafeAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysisServer will
// result in compilation errors.
type UnsafeAnalysisServer interface {
	mustEmbedUnimplementedAnalysisServer()
}

func RegisterAnalysisServer(s grpc.ServiceRegistrar, srv AnalysisServer) {
	// If the following call pancis, it indicates UnimplementedAnalysisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Analysis_ServiceDesc, srv)
}

func _Analysis_DelLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).DelLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_DelLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).DelLanguage(ctx, req.(*DelAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_DelRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).DelRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_DelRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).DelRegion(ctx, req.(*DelAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_DelPulsePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).DelPulsePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_DelPulsePoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).DelPulsePoint(ctx, req.(*DelAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_DelSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).DelSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_DelSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).DelSummary(ctx, req.(*DelAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_UpdateLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).UpdateLanguage(ctx, req.(*UpdateAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_UpdateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).UpdateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_UpdateRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).UpdateRegion(ctx, req.(*UpdateAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_UpdatePulsePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).UpdatePulsePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_UpdatePulsePoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).UpdatePulsePoint(ctx, req.(*UpdateAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_UpdateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).UpdateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_UpdateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).UpdateSummary(ctx, req.(*UpdateAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetLanguages(ctx, req.(*GetAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetRegion(ctx, req.(*GetAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetPulsePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetPulsePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetPulsePoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetPulsePoint(ctx, req.(*GetAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetSummary(ctx, req.(*GetAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Analysis_ServiceDesc is the grpc.ServiceDesc for Analysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.analysis",
	HandlerType: (*AnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelLanguage",
			Handler:    _Analysis_DelLanguage_Handler,
		},
		{
			MethodName: "DelRegion",
			Handler:    _Analysis_DelRegion_Handler,
		},
		{
			MethodName: "DelPulsePoint",
			Handler:    _Analysis_DelPulsePoint_Handler,
		},
		{
			MethodName: "DelSummary",
			Handler:    _Analysis_DelSummary_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _Analysis_UpdateLanguage_Handler,
		},
		{
			MethodName: "UpdateRegion",
			Handler:    _Analysis_UpdateRegion_Handler,
		},
		{
			MethodName: "UpdatePulsePoint",
			Handler:    _Analysis_UpdatePulsePoint_Handler,
		},
		{
			MethodName: "UpdateSummary",
			Handler:    _Analysis_UpdateSummary_Handler,
		},
		{
			MethodName: "GetLanguages",
			Handler:    _Analysis_GetLanguages_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _Analysis_GetRegion_Handler,
		},
		{
			MethodName: "GetPulsePoint",
			Handler:    _Analysis_GetPulsePoint_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _Analysis_GetSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analysis.proto",
}
