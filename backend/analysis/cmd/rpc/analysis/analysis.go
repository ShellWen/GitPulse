// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: analysis.proto

package analysis

import (
	"context"

	"github.com/ShellWen/GitPulse/analysis/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DelAnalysisReq     = pb.DelAnalysisReq
	DelAnalysisResp    = pb.DelAnalysisResp
	GetAnalysisReq     = pb.GetAnalysisReq
	GetLanguagesResp   = pb.GetLanguagesResp
	GetPulsePointResp  = pb.GetPulsePointResp
	GetRegionResp      = pb.GetRegionResp
	Languages          = pb.Languages
	PulsePoint         = pb.PulsePoint
	Region             = pb.Region
	UpdateAnalysisReq  = pb.UpdateAnalysisReq
	UpdateAnalysisResp = pb.UpdateAnalysisResp

	Analysis interface {
		// -----------------------analysis-----------------------
		DelLanguage(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
		DelRegion(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
		DelPulsePoint(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error)
		UpdateLanguage(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
		UpdateRegion(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
		UpdatePulsePoint(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error)
		GetLanguages(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetLanguagesResp, error)
		GetRegion(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetRegionResp, error)
		GetPulsePoint(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetPulsePointResp, error)
	}

	defaultAnalysis struct {
		cli zrpc.Client
	}
)

func NewAnalysis(cli zrpc.Client) Analysis {
	return &defaultAnalysis{
		cli: cli,
	}
}

// -----------------------analysis-----------------------
func (m *defaultAnalysis) DelLanguage(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.DelLanguage(ctx, in, opts...)
}

func (m *defaultAnalysis) DelRegion(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.DelRegion(ctx, in, opts...)
}

func (m *defaultAnalysis) DelPulsePoint(ctx context.Context, in *DelAnalysisReq, opts ...grpc.CallOption) (*DelAnalysisResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.DelPulsePoint(ctx, in, opts...)
}

func (m *defaultAnalysis) UpdateLanguage(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.UpdateLanguage(ctx, in, opts...)
}

func (m *defaultAnalysis) UpdateRegion(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.UpdateRegion(ctx, in, opts...)
}

func (m *defaultAnalysis) UpdatePulsePoint(ctx context.Context, in *UpdateAnalysisReq, opts ...grpc.CallOption) (*UpdateAnalysisResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.UpdatePulsePoint(ctx, in, opts...)
}

func (m *defaultAnalysis) GetLanguages(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetLanguagesResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.GetLanguages(ctx, in, opts...)
}

func (m *defaultAnalysis) GetRegion(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetRegionResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.GetRegion(ctx, in, opts...)
}

func (m *defaultAnalysis) GetPulsePoint(ctx context.Context, in *GetAnalysisReq, opts ...grpc.CallOption) (*GetPulsePointResp, error) {
	client := pb.NewAnalysisClient(m.cli.Conn())
	return client.GetPulsePoint(ctx, in, opts...)
}
