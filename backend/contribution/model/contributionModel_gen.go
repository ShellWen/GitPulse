// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contributionFieldNames          = builder.RawFieldNames(&Contribution{}, true)
	contributionRows                = strings.Join(contributionFieldNames, ",")
	contributionRowsExpectAutoSet   = strings.Join(stringx.Remove(contributionFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	contributionRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(contributionFieldNames, "data_id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheContributionContributionDataIdPrefix                             = "cache:contribution:contribution:dataId:"
	cacheContributionContributionCategoryRepoIdUserIdContributionIdPrefix = "cache:contribution:contribution:category:repoId:userId:contributionId:"
)

type (
	contributionModel interface {
		Insert(ctx context.Context, data *Contribution) (sql.Result, error)
		FindOne(ctx context.Context, dataId int64) (*Contribution, error)
		FindOneByCategoryRepoIdUserIdContributionId(ctx context.Context, category string, repoId int64, userId int64, contributionId int64) (*Contribution, error)
		Update(ctx context.Context, data *Contribution) error
		Delete(ctx context.Context, dataId int64) error
	}

	defaultContributionModel struct {
		sqlc.CachedConn
		table string
	}

	Contribution struct {
		DataId         int64     `db:"data_id"`
		DataCreateAt   time.Time `db:"data_create_at"`
		DataUpdateAt   time.Time `db:"data_update_at"`
		UserId         int64     `db:"user_id"`
		RepoId         int64     `db:"repo_id"`
		Category       string    `db:"category"`
		Content        string    `db:"content"`
		CreateAt       time.Time `db:"create_at"`
		UpdateAt       time.Time `db:"update_at"`
		ContributionId int64     `db:"contribution_id"`
	}
)

func newContributionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultContributionModel {
	return &defaultContributionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"contribution"."contribution"`,
	}
}

func (m *defaultContributionModel) Delete(ctx context.Context, dataId int64) error {
	data, err := m.FindOne(ctx, dataId)
	if err != nil {
		return err
	}

	contributionContributionCategoryRepoIdUserIdContributionIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheContributionContributionCategoryRepoIdUserIdContributionIdPrefix, data.Category, data.RepoId, data.UserId, data.ContributionId)
	contributionContributionDataIdKey := fmt.Sprintf("%s%v", cacheContributionContributionDataIdPrefix, dataId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where data_id = $1", m.table)
		return conn.ExecCtx(ctx, query, dataId)
	}, contributionContributionCategoryRepoIdUserIdContributionIdKey, contributionContributionDataIdKey)
	return err
}

func (m *defaultContributionModel) FindOne(ctx context.Context, dataId int64) (*Contribution, error) {
	contributionContributionDataIdKey := fmt.Sprintf("%s%v", cacheContributionContributionDataIdPrefix, dataId)
	var resp Contribution
	err := m.QueryRowCtx(ctx, &resp, contributionContributionDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", contributionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dataId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContributionModel) FindOneByCategoryRepoIdUserIdContributionId(ctx context.Context, category string, repoId int64, userId int64, contributionId int64) (*Contribution, error) {
	contributionContributionCategoryRepoIdUserIdContributionIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheContributionContributionCategoryRepoIdUserIdContributionIdPrefix, category, repoId, userId, contributionId)
	var resp Contribution
	err := m.QueryRowIndexCtx(ctx, &resp, contributionContributionCategoryRepoIdUserIdContributionIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where category = $1 and repo_id = $2 and user_id = $3 and contribution_id = $4 limit 1", contributionRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, category, repoId, userId, contributionId); err != nil {
			return nil, err
		}
		return resp.DataId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContributionModel) Insert(ctx context.Context, data *Contribution) (sql.Result, error) {
	contributionContributionCategoryRepoIdUserIdContributionIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheContributionContributionCategoryRepoIdUserIdContributionIdPrefix, data.Category, data.RepoId, data.UserId, data.ContributionId)
	contributionContributionDataIdKey := fmt.Sprintf("%s%v", cacheContributionContributionDataIdPrefix, data.DataId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, contributionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DataCreateAt, data.DataUpdateAt, data.UserId, data.RepoId, data.Category, data.Content, data.ContributionId)
	}, contributionContributionCategoryRepoIdUserIdContributionIdKey, contributionContributionDataIdKey)
	return ret, err
}

func (m *defaultContributionModel) Update(ctx context.Context, newData *Contribution) error {
	data, err := m.FindOne(ctx, newData.DataId)
	if err != nil {
		return err
	}

	contributionContributionCategoryRepoIdUserIdContributionIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheContributionContributionCategoryRepoIdUserIdContributionIdPrefix, data.Category, data.RepoId, data.UserId, data.ContributionId)
	contributionContributionDataIdKey := fmt.Sprintf("%s%v", cacheContributionContributionDataIdPrefix, data.DataId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where data_id = $1", m.table, contributionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DataId, newData.DataCreateAt, newData.DataUpdateAt, newData.UserId, newData.RepoId, newData.Category, newData.Content, newData.ContributionId)
	}, contributionContributionCategoryRepoIdUserIdContributionIdKey, contributionContributionDataIdKey)
	return err
}

func (m *defaultContributionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheContributionContributionDataIdPrefix, primary)
}

func (m *defaultContributionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where data_id = $1 limit 1", contributionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultContributionModel) tableName() string {
	return m.table
}
