// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: contribution.proto

package contribution

import (
	"context"

	"github.com/ShellWen/GitPulse/contribution/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddContributionReq                       = pb.AddContributionReq
	AddContributionResp                      = pb.AddContributionResp
	BlockUntilAllUpdatedReq                  = pb.BlockUntilAllUpdatedReq
	BlockUntilAllUpdatedResp                 = pb.BlockUntilAllUpdatedResp
	BlockUntilCommentReviewOfUserUpdatedReq  = pb.BlockUntilCommentReviewOfUserUpdatedReq
	BlockUntilCommentReviewOfUserUpdatedResp = pb.BlockUntilCommentReviewOfUserUpdatedResp
	BlockUntilIssuePrOfUserUpdatedReq        = pb.BlockUntilIssuePrOfUserUpdatedReq
	BlockUntilIssuePrOfUserUpdatedResp       = pb.BlockUntilIssuePrOfUserUpdatedResp
	Contribution                             = pb.Contribution
	DelAllContributionInCategoryByUserIdReq  = pb.DelAllContributionInCategoryByUserIdReq
	DelAllContributionInCategoryByUserIdResp = pb.DelAllContributionInCategoryByUserIdResp
	DelContributionReq                       = pb.DelContributionReq
	DelContributionResp                      = pb.DelContributionResp
	GetContributionReq                       = pb.GetContributionReq
	GetContributionResp                      = pb.GetContributionResp
	SearchByCategoryReq                      = pb.SearchByCategoryReq
	SearchByCategoryResp                     = pb.SearchByCategoryResp
	SearchByRepoIdReq                        = pb.SearchByRepoIdReq
	SearchByRepoIdResp                       = pb.SearchByRepoIdResp
	SearchByUserIdReq                        = pb.SearchByUserIdReq
	SearchByUserIdResp                       = pb.SearchByUserIdResp
	UpdateContributionReq                    = pb.UpdateContributionReq
	UpdateContributionResp                   = pb.UpdateContributionResp

	ContributionZrpcClient interface {
		// -----------------------contribution-----------------------
		AddContribution(ctx context.Context, in *AddContributionReq, opts ...grpc.CallOption) (*AddContributionResp, error)
		UpdateContribution(ctx context.Context, in *UpdateContributionReq, opts ...grpc.CallOption) (*UpdateContributionResp, error)
		DelContribution(ctx context.Context, in *DelContributionReq, opts ...grpc.CallOption) (*DelContributionResp, error)
		DelAllContributionInCategoryByUserId(ctx context.Context, in *DelAllContributionInCategoryByUserIdReq, opts ...grpc.CallOption) (*DelAllContributionInCategoryByUserIdResp, error)
		GetContribution(ctx context.Context, in *GetContributionReq, opts ...grpc.CallOption) (*GetContributionResp, error)
		SearchByCategory(ctx context.Context, in *SearchByCategoryReq, opts ...grpc.CallOption) (*SearchByCategoryResp, error)
		SearchByUserId(ctx context.Context, in *SearchByUserIdReq, opts ...grpc.CallOption) (*SearchByUserIdResp, error)
		SearchByRepoId(ctx context.Context, in *SearchByRepoIdReq, opts ...grpc.CallOption) (*SearchByRepoIdResp, error)
		BlockUntilIssuePrOfUserUpdated(ctx context.Context, in *BlockUntilIssuePrOfUserUpdatedReq, opts ...grpc.CallOption) (*BlockUntilIssuePrOfUserUpdatedResp, error)
		BlockUntilCommentReviewOfUserUpdated(ctx context.Context, in *BlockUntilCommentReviewOfUserUpdatedReq, opts ...grpc.CallOption) (*BlockUntilCommentReviewOfUserUpdatedResp, error)
		BlockUntilAllUpdated(ctx context.Context, in *BlockUntilAllUpdatedReq, opts ...grpc.CallOption) (*BlockUntilAllUpdatedResp, error)
	}

	defaultContributionZrpcClient struct {
		cli zrpc.Client
	}
)

func NewContributionZrpcClient(cli zrpc.Client) ContributionZrpcClient {
	return &defaultContributionZrpcClient{
		cli: cli,
	}
}

// -----------------------contribution-----------------------
func (m *defaultContributionZrpcClient) AddContribution(ctx context.Context, in *AddContributionReq, opts ...grpc.CallOption) (*AddContributionResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.AddContribution(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) UpdateContribution(ctx context.Context, in *UpdateContributionReq, opts ...grpc.CallOption) (*UpdateContributionResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.UpdateContribution(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) DelContribution(ctx context.Context, in *DelContributionReq, opts ...grpc.CallOption) (*DelContributionResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.DelContribution(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) DelAllContributionInCategoryByUserId(ctx context.Context, in *DelAllContributionInCategoryByUserIdReq, opts ...grpc.CallOption) (*DelAllContributionInCategoryByUserIdResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.DelAllContributionInCategoryByUserId(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) GetContribution(ctx context.Context, in *GetContributionReq, opts ...grpc.CallOption) (*GetContributionResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.GetContribution(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) SearchByCategory(ctx context.Context, in *SearchByCategoryReq, opts ...grpc.CallOption) (*SearchByCategoryResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.SearchByCategory(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) SearchByUserId(ctx context.Context, in *SearchByUserIdReq, opts ...grpc.CallOption) (*SearchByUserIdResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.SearchByUserId(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) SearchByRepoId(ctx context.Context, in *SearchByRepoIdReq, opts ...grpc.CallOption) (*SearchByRepoIdResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.SearchByRepoId(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) BlockUntilIssuePrOfUserUpdated(ctx context.Context, in *BlockUntilIssuePrOfUserUpdatedReq, opts ...grpc.CallOption) (*BlockUntilIssuePrOfUserUpdatedResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.BlockUntilIssuePrOfUserUpdated(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) BlockUntilCommentReviewOfUserUpdated(ctx context.Context, in *BlockUntilCommentReviewOfUserUpdatedReq, opts ...grpc.CallOption) (*BlockUntilCommentReviewOfUserUpdatedResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.BlockUntilCommentReviewOfUserUpdated(ctx, in, opts...)
}

func (m *defaultContributionZrpcClient) BlockUntilAllUpdated(ctx context.Context, in *BlockUntilAllUpdatedReq, opts ...grpc.CallOption) (*BlockUntilAllUpdatedResp, error) {
	client := pb.NewContributionClient(m.cli.Conn())
	return client.BlockUntilAllUpdated(ctx, in, opts...)
}
