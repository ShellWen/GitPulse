// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.19.4
// source: contribution.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --------------------------------contribution--------------------------------
type Contribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId         int64  `protobuf:"varint,1,opt,name=dataId,proto3" json:"dataId,omitempty"`                  //dataId
	DataCreatedAt  int64  `protobuf:"varint,2,opt,name=dataCreatedAt,proto3" json:"dataCreatedAt,omitempty"`    //dataCreatedAt
	DataUpdatedAt  int64  `protobuf:"varint,3,opt,name=dataUpdatedAt,proto3" json:"dataUpdatedAt,omitempty"`    //dataUpdatedAt
	UserId         int64  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`                  //userId
	RepoId         int64  `protobuf:"varint,5,opt,name=repoId,proto3" json:"repoId,omitempty"`                  //repoId
	Category       string `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`               //category
	Content        string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`                 //content
	CreatedAt      int64  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`            //createdAt
	UpdatedAt      int64  `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`            //updatedAt
	ContributionId int64  `protobuf:"varint,10,opt,name=contributionId,proto3" json:"contributionId,omitempty"` //contributionId
}

func (x *Contribution) Reset() {
	*x = Contribution{}
	mi := &file_contribution_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contribution) ProtoMessage() {}

func (x *Contribution) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contribution.ProtoReflect.Descriptor instead.
func (*Contribution) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{0}
}

func (x *Contribution) GetDataId() int64 {
	if x != nil {
		return x.DataId
	}
	return 0
}

func (x *Contribution) GetDataCreatedAt() int64 {
	if x != nil {
		return x.DataCreatedAt
	}
	return 0
}

func (x *Contribution) GetDataUpdatedAt() int64 {
	if x != nil {
		return x.DataUpdatedAt
	}
	return 0
}

func (x *Contribution) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Contribution) GetRepoId() int64 {
	if x != nil {
		return x.RepoId
	}
	return 0
}

func (x *Contribution) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Contribution) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Contribution) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Contribution) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Contribution) GetContributionId() int64 {
	if x != nil {
		return x.ContributionId
	}
	return 0
}

type AddContributionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                 //userId
	RepoId         int64  `protobuf:"varint,2,opt,name=repoId,proto3" json:"repoId,omitempty"`                 //repoId
	Category       string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`              //category
	Content        string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                //content
	CreatedAt      int64  `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`           //createdAt
	UpdatedAt      int64  `protobuf:"varint,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`           //updatedAt
	ContributionId int64  `protobuf:"varint,7,opt,name=contributionId,proto3" json:"contributionId,omitempty"` //contributionId
}

func (x *AddContributionReq) Reset() {
	*x = AddContributionReq{}
	mi := &file_contribution_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddContributionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContributionReq) ProtoMessage() {}

func (x *AddContributionReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContributionReq.ProtoReflect.Descriptor instead.
func (*AddContributionReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{1}
}

func (x *AddContributionReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddContributionReq) GetRepoId() int64 {
	if x != nil {
		return x.RepoId
	}
	return 0
}

func (x *AddContributionReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AddContributionReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddContributionReq) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AddContributionReq) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AddContributionReq) GetContributionId() int64 {
	if x != nil {
		return x.ContributionId
	}
	return 0
}

type AddContributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddContributionResp) Reset() {
	*x = AddContributionResp{}
	mi := &file_contribution_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddContributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContributionResp) ProtoMessage() {}

func (x *AddContributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContributionResp.ProtoReflect.Descriptor instead.
func (*AddContributionResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{2}
}

func (x *AddContributionResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddContributionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateContributionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                 //userId
	RepoId         int64  `protobuf:"varint,2,opt,name=repoId,proto3" json:"repoId,omitempty"`                 //repoId
	Category       string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`              //category
	Content        string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                //content
	CreatedAt      int64  `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`           //createdAt
	UpdatedAt      int64  `protobuf:"varint,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`           //updatedAt
	ContributionId int64  `protobuf:"varint,7,opt,name=contributionId,proto3" json:"contributionId,omitempty"` //contributionId
}

func (x *UpdateContributionReq) Reset() {
	*x = UpdateContributionReq{}
	mi := &file_contribution_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContributionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContributionReq) ProtoMessage() {}

func (x *UpdateContributionReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContributionReq.ProtoReflect.Descriptor instead.
func (*UpdateContributionReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateContributionReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateContributionReq) GetRepoId() int64 {
	if x != nil {
		return x.RepoId
	}
	return 0
}

func (x *UpdateContributionReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpdateContributionReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateContributionReq) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UpdateContributionReq) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UpdateContributionReq) GetContributionId() int64 {
	if x != nil {
		return x.ContributionId
	}
	return 0
}

type UpdateContributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateContributionResp) Reset() {
	*x = UpdateContributionResp{}
	mi := &file_contribution_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContributionResp) ProtoMessage() {}

func (x *UpdateContributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContributionResp.ProtoReflect.Descriptor instead.
func (*UpdateContributionResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateContributionResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateContributionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DelContributionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoId         int64  `protobuf:"varint,1,opt,name=repoId,proto3" json:"repoId,omitempty"`                 //repoId
	Category       string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`              //category
	ContributionId int64  `protobuf:"varint,3,opt,name=contributionId,proto3" json:"contributionId,omitempty"` //contributionId
}

func (x *DelContributionReq) Reset() {
	*x = DelContributionReq{}
	mi := &file_contribution_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelContributionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContributionReq) ProtoMessage() {}

func (x *DelContributionReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContributionReq.ProtoReflect.Descriptor instead.
func (*DelContributionReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{5}
}

func (x *DelContributionReq) GetRepoId() int64 {
	if x != nil {
		return x.RepoId
	}
	return 0
}

func (x *DelContributionReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DelContributionReq) GetContributionId() int64 {
	if x != nil {
		return x.ContributionId
	}
	return 0
}

type DelContributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DelContributionResp) Reset() {
	*x = DelContributionResp{}
	mi := &file_contribution_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelContributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContributionResp) ProtoMessage() {}

func (x *DelContributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContributionResp.ProtoReflect.Descriptor instead.
func (*DelContributionResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{6}
}

func (x *DelContributionResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DelContributionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DelAllContributionInCategoryByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"` //category
	UserId   int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`    //userId
}

func (x *DelAllContributionInCategoryByUserIdReq) Reset() {
	*x = DelAllContributionInCategoryByUserIdReq{}
	mi := &file_contribution_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelAllContributionInCategoryByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAllContributionInCategoryByUserIdReq) ProtoMessage() {}

func (x *DelAllContributionInCategoryByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAllContributionInCategoryByUserIdReq.ProtoReflect.Descriptor instead.
func (*DelAllContributionInCategoryByUserIdReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{7}
}

func (x *DelAllContributionInCategoryByUserIdReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DelAllContributionInCategoryByUserIdReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DelAllContributionInCategoryByUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DelAllContributionInCategoryByUserIdResp) Reset() {
	*x = DelAllContributionInCategoryByUserIdResp{}
	mi := &file_contribution_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelAllContributionInCategoryByUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAllContributionInCategoryByUserIdResp) ProtoMessage() {}

func (x *DelAllContributionInCategoryByUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAllContributionInCategoryByUserIdResp.ProtoReflect.Descriptor instead.
func (*DelAllContributionInCategoryByUserIdResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{8}
}

func (x *DelAllContributionInCategoryByUserIdResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DelAllContributionInCategoryByUserIdResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetContributionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoId         int64  `protobuf:"varint,1,opt,name=repoId,proto3" json:"repoId,omitempty"`                 //repoId
	Category       string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`              //category
	ContributionId int64  `protobuf:"varint,3,opt,name=contributionId,proto3" json:"contributionId,omitempty"` //contributionId
}

func (x *GetContributionReq) Reset() {
	*x = GetContributionReq{}
	mi := &file_contribution_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContributionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContributionReq) ProtoMessage() {}

func (x *GetContributionReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContributionReq.ProtoReflect.Descriptor instead.
func (*GetContributionReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{9}
}

func (x *GetContributionReq) GetRepoId() int64 {
	if x != nil {
		return x.RepoId
	}
	return 0
}

func (x *GetContributionReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetContributionReq) GetContributionId() int64 {
	if x != nil {
		return x.ContributionId
	}
	return 0
}

type GetContributionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message      string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Contribution *Contribution `protobuf:"bytes,3,opt,name=contribution,proto3" json:"contribution,omitempty"` //contribution
}

func (x *GetContributionResp) Reset() {
	*x = GetContributionResp{}
	mi := &file_contribution_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContributionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContributionResp) ProtoMessage() {}

func (x *GetContributionResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContributionResp.ProtoReflect.Descriptor instead.
func (*GetContributionResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{10}
}

func (x *GetContributionResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetContributionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetContributionResp) GetContribution() *Contribution {
	if x != nil {
		return x.Contribution
	}
	return nil
}

type SearchByCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`        //page
	Limit    int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`      //limit
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"` //category
}

func (x *SearchByCategoryReq) Reset() {
	*x = SearchByCategoryReq{}
	mi := &file_contribution_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchByCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByCategoryReq) ProtoMessage() {}

func (x *SearchByCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByCategoryReq.ProtoReflect.Descriptor instead.
func (*SearchByCategoryReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{11}
}

func (x *SearchByCategoryReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchByCategoryReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchByCategoryReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type SearchByCategoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int64           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Contributions []*Contribution `protobuf:"bytes,3,rep,name=contributions,proto3" json:"contributions,omitempty"` //contributions
}

func (x *SearchByCategoryResp) Reset() {
	*x = SearchByCategoryResp{}
	mi := &file_contribution_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchByCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByCategoryResp) ProtoMessage() {}

func (x *SearchByCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByCategoryResp.ProtoReflect.Descriptor instead.
func (*SearchByCategoryResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{12}
}

func (x *SearchByCategoryResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SearchByCategoryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SearchByCategoryResp) GetContributions() []*Contribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

type SearchByUserIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`     //page
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`   //limit
	UserId int64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"` //userId
}

func (x *SearchByUserIdReq) Reset() {
	*x = SearchByUserIdReq{}
	mi := &file_contribution_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchByUserIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByUserIdReq) ProtoMessage() {}

func (x *SearchByUserIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByUserIdReq.ProtoReflect.Descriptor instead.
func (*SearchByUserIdReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{13}
}

func (x *SearchByUserIdReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchByUserIdReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchByUserIdReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SearchByUserIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int64           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Contributions []*Contribution `protobuf:"bytes,3,rep,name=contributions,proto3" json:"contributions,omitempty"` //contributions
}

func (x *SearchByUserIdResp) Reset() {
	*x = SearchByUserIdResp{}
	mi := &file_contribution_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchByUserIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByUserIdResp) ProtoMessage() {}

func (x *SearchByUserIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByUserIdResp.ProtoReflect.Descriptor instead.
func (*SearchByUserIdResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{14}
}

func (x *SearchByUserIdResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SearchByUserIdResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SearchByUserIdResp) GetContributions() []*Contribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

type SearchByRepoIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`     //page
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`   //limit
	RepoId int64 `protobuf:"varint,3,opt,name=repoId,proto3" json:"repoId,omitempty"` //repoId
}

func (x *SearchByRepoIdReq) Reset() {
	*x = SearchByRepoIdReq{}
	mi := &file_contribution_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchByRepoIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByRepoIdReq) ProtoMessage() {}

func (x *SearchByRepoIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByRepoIdReq.ProtoReflect.Descriptor instead.
func (*SearchByRepoIdReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{15}
}

func (x *SearchByRepoIdReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchByRepoIdReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchByRepoIdReq) GetRepoId() int64 {
	if x != nil {
		return x.RepoId
	}
	return 0
}

type SearchByRepoIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int64           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Contributions []*Contribution `protobuf:"bytes,3,rep,name=contributions,proto3" json:"contributions,omitempty"` //contributions
}

func (x *SearchByRepoIdResp) Reset() {
	*x = SearchByRepoIdResp{}
	mi := &file_contribution_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchByRepoIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchByRepoIdResp) ProtoMessage() {}

func (x *SearchByRepoIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchByRepoIdResp.ProtoReflect.Descriptor instead.
func (*SearchByRepoIdResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{16}
}

func (x *SearchByRepoIdResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SearchByRepoIdResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SearchByRepoIdResp) GetContributions() []*Contribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

type BlockUntilIssuePrOfUserUpdatedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //userId
}

func (x *BlockUntilIssuePrOfUserUpdatedReq) Reset() {
	*x = BlockUntilIssuePrOfUserUpdatedReq{}
	mi := &file_contribution_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUntilIssuePrOfUserUpdatedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUntilIssuePrOfUserUpdatedReq) ProtoMessage() {}

func (x *BlockUntilIssuePrOfUserUpdatedReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUntilIssuePrOfUserUpdatedReq.ProtoReflect.Descriptor instead.
func (*BlockUntilIssuePrOfUserUpdatedReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{17}
}

func (x *BlockUntilIssuePrOfUserUpdatedReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type BlockUntilIssuePrOfUserUpdatedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BlockUntilIssuePrOfUserUpdatedResp) Reset() {
	*x = BlockUntilIssuePrOfUserUpdatedResp{}
	mi := &file_contribution_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUntilIssuePrOfUserUpdatedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUntilIssuePrOfUserUpdatedResp) ProtoMessage() {}

func (x *BlockUntilIssuePrOfUserUpdatedResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUntilIssuePrOfUserUpdatedResp.ProtoReflect.Descriptor instead.
func (*BlockUntilIssuePrOfUserUpdatedResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{18}
}

func (x *BlockUntilIssuePrOfUserUpdatedResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BlockUntilIssuePrOfUserUpdatedResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BlockUntilCommentReviewOfUserUpdatedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //userId
}

func (x *BlockUntilCommentReviewOfUserUpdatedReq) Reset() {
	*x = BlockUntilCommentReviewOfUserUpdatedReq{}
	mi := &file_contribution_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUntilCommentReviewOfUserUpdatedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUntilCommentReviewOfUserUpdatedReq) ProtoMessage() {}

func (x *BlockUntilCommentReviewOfUserUpdatedReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUntilCommentReviewOfUserUpdatedReq.ProtoReflect.Descriptor instead.
func (*BlockUntilCommentReviewOfUserUpdatedReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{19}
}

func (x *BlockUntilCommentReviewOfUserUpdatedReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type BlockUntilCommentReviewOfUserUpdatedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BlockUntilCommentReviewOfUserUpdatedResp) Reset() {
	*x = BlockUntilCommentReviewOfUserUpdatedResp{}
	mi := &file_contribution_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUntilCommentReviewOfUserUpdatedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUntilCommentReviewOfUserUpdatedResp) ProtoMessage() {}

func (x *BlockUntilCommentReviewOfUserUpdatedResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUntilCommentReviewOfUserUpdatedResp.ProtoReflect.Descriptor instead.
func (*BlockUntilCommentReviewOfUserUpdatedResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{20}
}

func (x *BlockUntilCommentReviewOfUserUpdatedResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BlockUntilCommentReviewOfUserUpdatedResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BlockUntilAllUpdatedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` //userId
}

func (x *BlockUntilAllUpdatedReq) Reset() {
	*x = BlockUntilAllUpdatedReq{}
	mi := &file_contribution_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUntilAllUpdatedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUntilAllUpdatedReq) ProtoMessage() {}

func (x *BlockUntilAllUpdatedReq) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUntilAllUpdatedReq.ProtoReflect.Descriptor instead.
func (*BlockUntilAllUpdatedReq) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{21}
}

func (x *BlockUntilAllUpdatedReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type BlockUntilAllUpdatedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BlockUntilAllUpdatedResp) Reset() {
	*x = BlockUntilAllUpdatedResp{}
	mi := &file_contribution_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUntilAllUpdatedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUntilAllUpdatedResp) ProtoMessage() {}

func (x *BlockUntilAllUpdatedResp) ProtoReflect() protoreflect.Message {
	mi := &file_contribution_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUntilAllUpdatedResp.ProtoReflect.Descriptor instead.
func (*BlockUntilAllUpdatedResp) Descriptor() ([]byte, []int) {
	return file_contribution_proto_rawDescGZIP(), []int{22}
}

func (x *BlockUntilAllUpdatedResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BlockUntilAllUpdatedResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_contribution_proto protoreflect.FileDescriptor

var file_contribution_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xbc, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe1, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x46, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x5d, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x7c, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x55, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x55, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x21, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x4f, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x22, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x27, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x28, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x41, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x41, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0xbc, 0x07, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x45, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a, 0x1e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x24, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51,
	0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x41, 0x6c, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x41, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x41, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_contribution_proto_rawDescOnce sync.Once
	file_contribution_proto_rawDescData = file_contribution_proto_rawDesc
)

func file_contribution_proto_rawDescGZIP() []byte {
	file_contribution_proto_rawDescOnce.Do(func() {
		file_contribution_proto_rawDescData = protoimpl.X.CompressGZIP(file_contribution_proto_rawDescData)
	})
	return file_contribution_proto_rawDescData
}

var file_contribution_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_contribution_proto_goTypes = []any{
	(*Contribution)(nil),                             // 0: pb.Contribution
	(*AddContributionReq)(nil),                       // 1: pb.AddContributionReq
	(*AddContributionResp)(nil),                      // 2: pb.AddContributionResp
	(*UpdateContributionReq)(nil),                    // 3: pb.UpdateContributionReq
	(*UpdateContributionResp)(nil),                   // 4: pb.UpdateContributionResp
	(*DelContributionReq)(nil),                       // 5: pb.DelContributionReq
	(*DelContributionResp)(nil),                      // 6: pb.DelContributionResp
	(*DelAllContributionInCategoryByUserIdReq)(nil),  // 7: pb.DelAllContributionInCategoryByUserIdReq
	(*DelAllContributionInCategoryByUserIdResp)(nil), // 8: pb.DelAllContributionInCategoryByUserIdResp
	(*GetContributionReq)(nil),                       // 9: pb.GetContributionReq
	(*GetContributionResp)(nil),                      // 10: pb.GetContributionResp
	(*SearchByCategoryReq)(nil),                      // 11: pb.SearchByCategoryReq
	(*SearchByCategoryResp)(nil),                     // 12: pb.SearchByCategoryResp
	(*SearchByUserIdReq)(nil),                        // 13: pb.SearchByUserIdReq
	(*SearchByUserIdResp)(nil),                       // 14: pb.SearchByUserIdResp
	(*SearchByRepoIdReq)(nil),                        // 15: pb.SearchByRepoIdReq
	(*SearchByRepoIdResp)(nil),                       // 16: pb.SearchByRepoIdResp
	(*BlockUntilIssuePrOfUserUpdatedReq)(nil),        // 17: pb.BlockUntilIssuePrOfUserUpdatedReq
	(*BlockUntilIssuePrOfUserUpdatedResp)(nil),       // 18: pb.BlockUntilIssuePrOfUserUpdatedResp
	(*BlockUntilCommentReviewOfUserUpdatedReq)(nil),  // 19: pb.BlockUntilCommentReviewOfUserUpdatedReq
	(*BlockUntilCommentReviewOfUserUpdatedResp)(nil), // 20: pb.BlockUntilCommentReviewOfUserUpdatedResp
	(*BlockUntilAllUpdatedReq)(nil),                  // 21: pb.BlockUntilAllUpdatedReq
	(*BlockUntilAllUpdatedResp)(nil),                 // 22: pb.BlockUntilAllUpdatedResp
}
var file_contribution_proto_depIdxs = []int32{
	0,  // 0: pb.GetContributionResp.contribution:type_name -> pb.Contribution
	0,  // 1: pb.SearchByCategoryResp.contributions:type_name -> pb.Contribution
	0,  // 2: pb.SearchByUserIdResp.contributions:type_name -> pb.Contribution
	0,  // 3: pb.SearchByRepoIdResp.contributions:type_name -> pb.Contribution
	1,  // 4: pb.contribution.AddContribution:input_type -> pb.AddContributionReq
	3,  // 5: pb.contribution.UpdateContribution:input_type -> pb.UpdateContributionReq
	5,  // 6: pb.contribution.DelContribution:input_type -> pb.DelContributionReq
	7,  // 7: pb.contribution.DelAllContributionInCategoryByUserId:input_type -> pb.DelAllContributionInCategoryByUserIdReq
	9,  // 8: pb.contribution.GetContribution:input_type -> pb.GetContributionReq
	11, // 9: pb.contribution.SearchByCategory:input_type -> pb.SearchByCategoryReq
	13, // 10: pb.contribution.SearchByUserId:input_type -> pb.SearchByUserIdReq
	15, // 11: pb.contribution.SearchByRepoId:input_type -> pb.SearchByRepoIdReq
	17, // 12: pb.contribution.BlockUntilIssuePrOfUserUpdated:input_type -> pb.BlockUntilIssuePrOfUserUpdatedReq
	19, // 13: pb.contribution.BlockUntilCommentReviewOfUserUpdated:input_type -> pb.BlockUntilCommentReviewOfUserUpdatedReq
	21, // 14: pb.contribution.BlockUntilAllUpdated:input_type -> pb.BlockUntilAllUpdatedReq
	2,  // 15: pb.contribution.AddContribution:output_type -> pb.AddContributionResp
	4,  // 16: pb.contribution.UpdateContribution:output_type -> pb.UpdateContributionResp
	6,  // 17: pb.contribution.DelContribution:output_type -> pb.DelContributionResp
	8,  // 18: pb.contribution.DelAllContributionInCategoryByUserId:output_type -> pb.DelAllContributionInCategoryByUserIdResp
	10, // 19: pb.contribution.GetContribution:output_type -> pb.GetContributionResp
	12, // 20: pb.contribution.SearchByCategory:output_type -> pb.SearchByCategoryResp
	14, // 21: pb.contribution.SearchByUserId:output_type -> pb.SearchByUserIdResp
	16, // 22: pb.contribution.SearchByRepoId:output_type -> pb.SearchByRepoIdResp
	18, // 23: pb.contribution.BlockUntilIssuePrOfUserUpdated:output_type -> pb.BlockUntilIssuePrOfUserUpdatedResp
	20, // 24: pb.contribution.BlockUntilCommentReviewOfUserUpdated:output_type -> pb.BlockUntilCommentReviewOfUserUpdatedResp
	22, // 25: pb.contribution.BlockUntilAllUpdated:output_type -> pb.BlockUntilAllUpdatedResp
	15, // [15:26] is the sub-list for method output_type
	4,  // [4:15] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_contribution_proto_init() }
func file_contribution_proto_init() {
	if File_contribution_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contribution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contribution_proto_goTypes,
		DependencyIndexes: file_contribution_proto_depIdxs,
		MessageInfos:      file_contribution_proto_msgTypes,
	}.Build()
	File_contribution_proto = out.File
	file_contribution_proto_rawDesc = nil
	file_contribution_proto_goTypes = nil
	file_contribution_proto_depIdxs = nil
}
